"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6384],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=r.createContext({}),i=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,d=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=i(n),s=l,v=c["".concat(d,".").concat(s)]||c[s]||k[s]||a;return n?r.createElement(v,o(o({ref:t},p),{},{components:n})):r.createElement(v,o({ref:t},p))}));function v(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=s;var u={};for(var d in t)hasOwnProperty.call(t,d)&&(u[d]=t[d]);u.originalType=e,u[c]="string"==typeof e?e:l,o[1]=u;for(var i=2;i<a;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var r=n(3117),l=(n(7294),n(3905));const a={title:"Sound.Tidal.Params",slug:"/library/modules/Sound.Tidal.Params"},o=void 0,u={unversionedId:"library/autogenerated/Sound-Tidal-Params/Sound-Tidal-Params",id:"library/autogenerated/Sound-Tidal-Params/Sound-Tidal-Params",title:"Sound.Tidal.Params",description:"\x3c!------------------------------------------------------------------------------",source:"@site/docs/library/autogenerated/Sound-Tidal-Params/Sound-Tidal-Params.mdx",sourceDirName:"library/autogenerated/Sound-Tidal-Params",slug:"/library/modules/Sound.Tidal.Params",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.Params",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/library/autogenerated/Sound-Tidal-Params/Sound-Tidal-Params.mdx",tags:[],version:"current",lastUpdatedBy:"Matthew Kaney",lastUpdatedAt:1673207986,formattedLastUpdatedAt:"Jan 8, 2023",frontMatter:{title:"Sound.Tidal.Params",slug:"/library/modules/Sound.Tidal.Params"},sidebar:"library",previous:{title:"Sound.Tidal.ID",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.ID"},next:{title:"Sound.Tidal.ParseBP",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.ParseBP"}},d={},i=[{value:"grp",id:"grp",level:3},{value:"mF",id:"mf",level:3},{value:"mI",id:"mi",level:3},{value:"mS",id:"ms",level:3},{value:"pF",id:"pf",level:3},{value:"pI",id:"pi",level:3},{value:"pB",id:"pb",level:3},{value:"pR",id:"pr",level:3},{value:"pN",id:"pn",level:3},{value:"pS",id:"ps",level:3},{value:"pX",id:"px",level:3},{value:"pStateF",id:"pstatef",level:3},{value:"pStateList",id:"pstatelist",level:3},{value:"pStateListF",id:"pstatelistf",level:3},{value:"pStateListS",id:"pstatelists",level:3},{value:"sound",id:"sound",level:3},{value:"sTake",id:"stake",level:3},{value:"cc",id:"cc",level:3},{value:"nrpn",id:"nrpn",level:3},{value:"nrpnn",id:"nrpnn",level:3},{value:"nrpnv",id:"nrpnv",level:3},{value:"grain&#39;",id:"grain",level:3},{value:"midinote",id:"midinote",level:3},{value:"drum",id:"drum",level:3},{value:"drumN",id:"drumn",level:3},{value:"accelerate",id:"accelerate",level:3},{value:"accelerateTake",id:"acceleratetake",level:3},{value:"accelerateCount",id:"acceleratecount",level:3},{value:"accelerateCountTo",id:"acceleratecountto",level:3},{value:"acceleratebus",id:"acceleratebus",level:3},{value:"amp",id:"amp",level:3},{value:"ampTake",id:"amptake",level:3},{value:"ampCount",id:"ampcount",level:3},{value:"ampCountTo",id:"ampcountto",level:3},{value:"ampbus",id:"ampbus",level:3},{value:"amprecv",id:"amprecv",level:3},{value:"array",id:"array",level:3},{value:"arrayTake",id:"arraytake",level:3},{value:"arraybus",id:"arraybus",level:3},{value:"attack",id:"attack",level:3},{value:"attackTake",id:"attacktake",level:3},{value:"attackCount",id:"attackcount",level:3},{value:"attackCountTo",id:"attackcountto",level:3},{value:"attackbus",id:"attackbus",level:3},{value:"attackrecv",id:"attackrecv",level:3},{value:"bandf",id:"bandf",level:3},{value:"bandfTake",id:"bandftake",level:3},{value:"bandfCount",id:"bandfcount",level:3},{value:"bandfCountTo",id:"bandfcountto",level:3},{value:"bandfbus",id:"bandfbus",level:3},{value:"bandfrecv",id:"bandfrecv",level:3},{value:"bandq",id:"bandq",level:3},{value:"bandqTake",id:"bandqtake",level:3},{value:"bandqCount",id:"bandqcount",level:3},{value:"bandqCountTo",id:"bandqcountto",level:3},{value:"bandqbus",id:"bandqbus",level:3},{value:"bandqrecv",id:"bandqrecv",level:3},{value:"begin",id:"begin",level:3},{value:"beginTake",id:"begintake",level:3},{value:"beginCount",id:"begincount",level:3},{value:"beginCountTo",id:"begincountto",level:3},{value:"beginbus",id:"beginbus",level:3},{value:"binshift",id:"binshift",level:3},{value:"binshiftTake",id:"binshifttake",level:3},{value:"binshiftCount",id:"binshiftcount",level:3},{value:"binshiftCountTo",id:"binshiftcountto",level:3},{value:"binshiftbus",id:"binshiftbus",level:3},{value:"binshiftrecv",id:"binshiftrecv",level:3},{value:"button0",id:"button0",level:3},{value:"button0Take",id:"button0take",level:3},{value:"button0Count",id:"button0count",level:3},{value:"button0CountTo",id:"button0countto",level:3},{value:"button0bus",id:"button0bus",level:3},{value:"button0recv",id:"button0recv",level:3},{value:"button1",id:"button1",level:3},{value:"button1Take",id:"button1take",level:3},{value:"button1Count",id:"button1count",level:3},{value:"button1CountTo",id:"button1countto",level:3},{value:"button1bus",id:"button1bus",level:3},{value:"button1recv",id:"button1recv",level:3},{value:"button10",id:"button10",level:3},{value:"button10Take",id:"button10take",level:3},{value:"button10Count",id:"button10count",level:3},{value:"button10CountTo",id:"button10countto",level:3},{value:"button10bus",id:"button10bus",level:3},{value:"button10recv",id:"button10recv",level:3},{value:"button11",id:"button11",level:3},{value:"button11Take",id:"button11take",level:3},{value:"button11Count",id:"button11count",level:3},{value:"button11CountTo",id:"button11countto",level:3},{value:"button11bus",id:"button11bus",level:3},{value:"button11recv",id:"button11recv",level:3},{value:"button12",id:"button12",level:3},{value:"button12Take",id:"button12take",level:3},{value:"button12Count",id:"button12count",level:3},{value:"button12CountTo",id:"button12countto",level:3},{value:"button12bus",id:"button12bus",level:3},{value:"button12recv",id:"button12recv",level:3},{value:"button13",id:"button13",level:3},{value:"button13Take",id:"button13take",level:3},{value:"button13Count",id:"button13count",level:3},{value:"button13CountTo",id:"button13countto",level:3},{value:"button13bus",id:"button13bus",level:3},{value:"button13recv",id:"button13recv",level:3},{value:"button14",id:"button14",level:3},{value:"button14Take",id:"button14take",level:3},{value:"button14Count",id:"button14count",level:3},{value:"button14CountTo",id:"button14countto",level:3},{value:"button14bus",id:"button14bus",level:3},{value:"button14recv",id:"button14recv",level:3},{value:"button15",id:"button15",level:3},{value:"button15Take",id:"button15take",level:3},{value:"button15Count",id:"button15count",level:3},{value:"button15CountTo",id:"button15countto",level:3},{value:"button15bus",id:"button15bus",level:3},{value:"button15recv",id:"button15recv",level:3},{value:"button2",id:"button2",level:3},{value:"button2Take",id:"button2take",level:3},{value:"button2Count",id:"button2count",level:3},{value:"button2CountTo",id:"button2countto",level:3},{value:"button2bus",id:"button2bus",level:3},{value:"button2recv",id:"button2recv",level:3},{value:"button3",id:"button3",level:3},{value:"button3Take",id:"button3take",level:3},{value:"button3Count",id:"button3count",level:3},{value:"button3CountTo",id:"button3countto",level:3},{value:"button3bus",id:"button3bus",level:3},{value:"button3recv",id:"button3recv",level:3},{value:"button4",id:"button4",level:3},{value:"button4Take",id:"button4take",level:3},{value:"button4Count",id:"button4count",level:3},{value:"button4CountTo",id:"button4countto",level:3},{value:"button4bus",id:"button4bus",level:3},{value:"button4recv",id:"button4recv",level:3},{value:"button5",id:"button5",level:3},{value:"button5Take",id:"button5take",level:3},{value:"button5Count",id:"button5count",level:3},{value:"button5CountTo",id:"button5countto",level:3},{value:"button5bus",id:"button5bus",level:3},{value:"button5recv",id:"button5recv",level:3},{value:"button6",id:"button6",level:3},{value:"button6Take",id:"button6take",level:3},{value:"button6Count",id:"button6count",level:3},{value:"button6CountTo",id:"button6countto",level:3},{value:"button6bus",id:"button6bus",level:3},{value:"button6recv",id:"button6recv",level:3},{value:"button7",id:"button7",level:3},{value:"button7Take",id:"button7take",level:3},{value:"button7Count",id:"button7count",level:3},{value:"button7CountTo",id:"button7countto",level:3},{value:"button7bus",id:"button7bus",level:3},{value:"button7recv",id:"button7recv",level:3},{value:"button8",id:"button8",level:3},{value:"button8Take",id:"button8take",level:3},{value:"button8Count",id:"button8count",level:3},{value:"button8CountTo",id:"button8countto",level:3},{value:"button8bus",id:"button8bus",level:3},{value:"button8recv",id:"button8recv",level:3},{value:"button9",id:"button9",level:3},{value:"button9Take",id:"button9take",level:3},{value:"button9Count",id:"button9count",level:3},{value:"button9CountTo",id:"button9countto",level:3},{value:"button9bus",id:"button9bus",level:3},{value:"button9recv",id:"button9recv",level:3},{value:"ccn",id:"ccn",level:3},{value:"ccnTake",id:"ccntake",level:3},{value:"ccnCount",id:"ccncount",level:3},{value:"ccnCountTo",id:"ccncountto",level:3},{value:"ccnbus",id:"ccnbus",level:3},{value:"ccv",id:"ccv",level:3},{value:"ccvTake",id:"ccvtake",level:3},{value:"ccvCount",id:"ccvcount",level:3},{value:"ccvCountTo",id:"ccvcountto",level:3},{value:"ccvbus",id:"ccvbus",level:3},{value:"channel",id:"channel",level:3},{value:"channelTake",id:"channeltake",level:3},{value:"channelCount",id:"channelcount",level:3},{value:"channelCountTo",id:"channelcountto",level:3},{value:"channelbus",id:"channelbus",level:3},{value:"clhatdecay",id:"clhatdecay",level:3},{value:"clhatdecayTake",id:"clhatdecaytake",level:3},{value:"clhatdecayCount",id:"clhatdecaycount",level:3},{value:"clhatdecayCountTo",id:"clhatdecaycountto",level:3},{value:"clhatdecaybus",id:"clhatdecaybus",level:3},{value:"clhatdecayrecv",id:"clhatdecayrecv",level:3},{value:"coarse",id:"coarse",level:3},{value:"coarseTake",id:"coarsetake",level:3},{value:"coarseCount",id:"coarsecount",level:3},{value:"coarseCountTo",id:"coarsecountto",level:3},{value:"coarsebus",id:"coarsebus",level:3},{value:"coarserecv",id:"coarserecv",level:3},{value:"comb",id:"comb",level:3},{value:"combTake",id:"combtake",level:3},{value:"combCount",id:"combcount",level:3},{value:"combCountTo",id:"combcountto",level:3},{value:"combbus",id:"combbus",level:3},{value:"combrecv",id:"combrecv",level:3},{value:"control",id:"control",level:3},{value:"controlTake",id:"controltake",level:3},{value:"controlCount",id:"controlcount",level:3},{value:"controlCountTo",id:"controlcountto",level:3},{value:"controlbus",id:"controlbus",level:3},{value:"cps",id:"cps",level:3},{value:"cpsTake",id:"cpstake",level:3},{value:"cpsCount",id:"cpscount",level:3},{value:"cpsCountTo",id:"cpscountto",level:3},{value:"cpsbus",id:"cpsbus",level:3},{value:"cpsrecv",id:"cpsrecv",level:3},{value:"crush",id:"crush",level:3},{value:"crushTake",id:"crushtake",level:3},{value:"crushCount",id:"crushcount",level:3},{value:"crushCountTo",id:"crushcountto",level:3},{value:"crushbus",id:"crushbus",level:3},{value:"crushrecv",id:"crushrecv",level:3},{value:"ctlNum",id:"ctlnum",level:3},{value:"ctlNumTake",id:"ctlnumtake",level:3},{value:"ctlNumCount",id:"ctlnumcount",level:3},{value:"ctlNumCountTo",id:"ctlnumcountto",level:3},{value:"ctlNumbus",id:"ctlnumbus",level:3},{value:"ctranspose",id:"ctranspose",level:3},{value:"ctransposeTake",id:"ctransposetake",level:3},{value:"ctransposeCount",id:"ctransposecount",level:3},{value:"ctransposeCountTo",id:"ctransposecountto",level:3},{value:"ctransposebus",id:"ctransposebus",level:3},{value:"ctransposerecv",id:"ctransposerecv",level:3},{value:"cut",id:"cut",level:3},{value:"cutTake",id:"cuttake",level:3},{value:"cutCount",id:"cutcount",level:3},{value:"cutCountTo",id:"cutcountto",level:3},{value:"cutbus",id:"cutbus",level:3},{value:"cutrecv",id:"cutrecv",level:3},{value:"cutoff",id:"cutoff",level:3},{value:"cutoffTake",id:"cutofftake",level:3},{value:"cutoffCount",id:"cutoffcount",level:3},{value:"cutoffCountTo",id:"cutoffcountto",level:3},{value:"cutoffbus",id:"cutoffbus",level:3},{value:"cutoffrecv",id:"cutoffrecv",level:3},{value:"cutoffegint",id:"cutoffegint",level:3},{value:"cutoffegintTake",id:"cutoffeginttake",level:3},{value:"cutoffegintCount",id:"cutoffegintcount",level:3},{value:"cutoffegintCountTo",id:"cutoffegintcountto",level:3},{value:"cutoffegintbus",id:"cutoffegintbus",level:3},{value:"cutoffegintrecv",id:"cutoffegintrecv",level:3},{value:"decay",id:"decay",level:3},{value:"decayTake",id:"decaytake",level:3},{value:"decayCount",id:"decaycount",level:3},{value:"decayCountTo",id:"decaycountto",level:3},{value:"decaybus",id:"decaybus",level:3},{value:"decayrecv",id:"decayrecv",level:3},{value:"degree",id:"degree",level:3},{value:"degreeTake",id:"degreetake",level:3},{value:"degreeCount",id:"degreecount",level:3},{value:"degreeCountTo",id:"degreecountto",level:3},{value:"degreebus",id:"degreebus",level:3},{value:"degreerecv",id:"degreerecv",level:3},{value:"delay",id:"delay",level:3},{value:"delayTake",id:"delaytake",level:3},{value:"delayCount",id:"delaycount",level:3},{value:"delayCountTo",id:"delaycountto",level:3},{value:"delaybus",id:"delaybus",level:3},{value:"delayrecv",id:"delayrecv",level:3},{value:"delayfeedback",id:"delayfeedback",level:3},{value:"delayfeedbackTake",id:"delayfeedbacktake",level:3},{value:"delayfeedbackCount",id:"delayfeedbackcount",level:3},{value:"delayfeedbackCountTo",id:"delayfeedbackcountto",level:3},{value:"delayfeedbackbus",id:"delayfeedbackbus",level:3},{value:"delayfeedbackrecv",id:"delayfeedbackrecv",level:3},{value:"delaytime",id:"delaytime",level:3},{value:"delaytimeTake",id:"delaytimetake",level:3},{value:"delaytimeCount",id:"delaytimecount",level:3},{value:"delaytimeCountTo",id:"delaytimecountto",level:3},{value:"delaytimebus",id:"delaytimebus",level:3},{value:"delaytimerecv",id:"delaytimerecv",level:3},{value:"detune",id:"detune",level:3},{value:"detuneTake",id:"detunetake",level:3},{value:"detuneCount",id:"detunecount",level:3},{value:"detuneCountTo",id:"detunecountto",level:3},{value:"detunebus",id:"detunebus",level:3},{value:"detunerecv",id:"detunerecv",level:3},{value:"distort",id:"distort",level:3},{value:"distortTake",id:"distorttake",level:3},{value:"distortCount",id:"distortcount",level:3},{value:"distortCountTo",id:"distortcountto",level:3},{value:"distortbus",id:"distortbus",level:3},{value:"distortrecv",id:"distortrecv",level:3},{value:"djf",id:"djf",level:3},{value:"djfTake",id:"djftake",level:3},{value:"djfCount",id:"djfcount",level:3},{value:"djfCountTo",id:"djfcountto",level:3},{value:"djfbus",id:"djfbus",level:3},{value:"djfrecv",id:"djfrecv",level:3},{value:"dry",id:"dry",level:3},{value:"dryTake",id:"drytake",level:3},{value:"dryCount",id:"drycount",level:3},{value:"dryCountTo",id:"drycountto",level:3},{value:"drybus",id:"drybus",level:3},{value:"dryrecv",id:"dryrecv",level:3},{value:"dur",id:"dur",level:3},{value:"durTake",id:"durtake",level:3},{value:"durCount",id:"durcount",level:3},{value:"durCountTo",id:"durcountto",level:3},{value:"durbus",id:"durbus",level:3},{value:"durrecv",id:"durrecv",level:3},{value:"end",id:"end",level:3},{value:"endTake",id:"endtake",level:3},{value:"endCount",id:"endcount",level:3},{value:"endCountTo",id:"endcountto",level:3},{value:"endbus",id:"endbus",level:3},{value:"enhance",id:"enhance",level:3},{value:"enhanceTake",id:"enhancetake",level:3},{value:"enhanceCount",id:"enhancecount",level:3},{value:"enhanceCountTo",id:"enhancecountto",level:3},{value:"enhancebus",id:"enhancebus",level:3},{value:"enhancerecv",id:"enhancerecv",level:3},{value:"expression",id:"expression",level:3},{value:"expressionTake",id:"expressiontake",level:3},{value:"expressionCount",id:"expressioncount",level:3},{value:"expressionCountTo",id:"expressioncountto",level:3},{value:"expressionbus",id:"expressionbus",level:3},{value:"expressionrecv",id:"expressionrecv",level:3},{value:"fadeInTime",id:"fadeintime",level:3},{value:"fadeInTimeTake",id:"fadeintimetake",level:3},{value:"fadeInTimeCount",id:"fadeintimecount",level:3},{value:"fadeInTimeCountTo",id:"fadeintimecountto",level:3},{value:"fadeInTimebus",id:"fadeintimebus",level:3},{value:"fadeTime",id:"fadetime",level:3},{value:"fadeTimeTake",id:"fadetimetake",level:3},{value:"fadeTimeCount",id:"fadetimecount",level:3},{value:"fadeTimeCountTo",id:"fadetimecountto",level:3},{value:"fadeTimebus",id:"fadetimebus",level:3},{value:"frameRate",id:"framerate",level:3},{value:"frameRateTake",id:"frameratetake",level:3},{value:"frameRateCount",id:"frameratecount",level:3},{value:"frameRateCountTo",id:"frameratecountto",level:3},{value:"frameRatebus",id:"frameratebus",level:3},{value:"frames",id:"frames",level:3},{value:"framesTake",id:"framestake",level:3},{value:"framesCount",id:"framescount",level:3},{value:"framesCountTo",id:"framescountto",level:3},{value:"framesbus",id:"framesbus",level:3},{value:"freeze",id:"freeze",level:3},{value:"freezeTake",id:"freezetake",level:3},{value:"freezeCount",id:"freezecount",level:3},{value:"freezeCountTo",id:"freezecountto",level:3},{value:"freezebus",id:"freezebus",level:3},{value:"freezerecv",id:"freezerecv",level:3},{value:"freq",id:"freq",level:3},{value:"freqTake",id:"freqtake",level:3},{value:"freqCount",id:"freqcount",level:3},{value:"freqCountTo",id:"freqcountto",level:3},{value:"freqbus",id:"freqbus",level:3},{value:"freqrecv",id:"freqrecv",level:3},{value:"from",id:"from",level:3},{value:"fromTake",id:"fromtake",level:3},{value:"fromCount",id:"fromcount",level:3},{value:"fromCountTo",id:"fromcountto",level:3},{value:"frombus",id:"frombus",level:3},{value:"fromrecv",id:"fromrecv",level:3},{value:"fshift",id:"fshift",level:3},{value:"fshiftTake",id:"fshifttake",level:3},{value:"fshiftCount",id:"fshiftcount",level:3},{value:"fshiftCountTo",id:"fshiftcountto",level:3},{value:"fshiftbus",id:"fshiftbus",level:3},{value:"fshiftrecv",id:"fshiftrecv",level:3},{value:"fshiftnote",id:"fshiftnote",level:3},{value:"fshiftnoteTake",id:"fshiftnotetake",level:3},{value:"fshiftnoteCount",id:"fshiftnotecount",level:3},{value:"fshiftnoteCountTo",id:"fshiftnotecountto",level:3},{value:"fshiftnotebus",id:"fshiftnotebus",level:3},{value:"fshiftnoterecv",id:"fshiftnoterecv",level:3},{value:"fshiftphase",id:"fshiftphase",level:3},{value:"fshiftphaseTake",id:"fshiftphasetake",level:3},{value:"fshiftphaseCount",id:"fshiftphasecount",level:3},{value:"fshiftphaseCountTo",id:"fshiftphasecountto",level:3},{value:"fshiftphasebus",id:"fshiftphasebus",level:3},{value:"fshiftphaserecv",id:"fshiftphaserecv",level:3},{value:"gain",id:"gain",level:3},{value:"gainTake",id:"gaintake",level:3},{value:"gainCount",id:"gaincount",level:3},{value:"gainCountTo",id:"gaincountto",level:3},{value:"gainbus",id:"gainbus",level:3},{value:"gate",id:"gate",level:3},{value:"gateTake",id:"gatetake",level:3},{value:"gateCount",id:"gatecount",level:3},{value:"gateCountTo",id:"gatecountto",level:3},{value:"gatebus",id:"gatebus",level:3},{value:"gaterecv",id:"gaterecv",level:3},{value:"harmonic",id:"harmonic",level:3},{value:"harmonicTake",id:"harmonictake",level:3},{value:"harmonicCount",id:"harmoniccount",level:3},{value:"harmonicCountTo",id:"harmoniccountto",level:3},{value:"harmonicbus",id:"harmonicbus",level:3},{value:"harmonicrecv",id:"harmonicrecv",level:3},{value:"hatgrain",id:"hatgrain",level:3},{value:"hatgrainTake",id:"hatgraintake",level:3},{value:"hatgrainCount",id:"hatgraincount",level:3},{value:"hatgrainCountTo",id:"hatgraincountto",level:3},{value:"hatgrainbus",id:"hatgrainbus",level:3},{value:"hatgrainrecv",id:"hatgrainrecv",level:3},{value:"hbrick",id:"hbrick",level:3},{value:"hbrickTake",id:"hbricktake",level:3},{value:"hbrickCount",id:"hbrickcount",level:3},{value:"hbrickCountTo",id:"hbrickcountto",level:3},{value:"hbrickbus",id:"hbrickbus",level:3},{value:"hbrickrecv",id:"hbrickrecv",level:3},{value:"hcutoff",id:"hcutoff",level:3},{value:"hcutoffTake",id:"hcutofftake",level:3},{value:"hcutoffCount",id:"hcutoffcount",level:3},{value:"hcutoffCountTo",id:"hcutoffcountto",level:3},{value:"hcutoffbus",id:"hcutoffbus",level:3},{value:"hcutoffrecv",id:"hcutoffrecv",level:3},{value:"hold",id:"hold",level:3},{value:"holdTake",id:"holdtake",level:3},{value:"holdCount",id:"holdcount",level:3},{value:"holdCountTo",id:"holdcountto",level:3},{value:"holdbus",id:"holdbus",level:3},{value:"holdrecv",id:"holdrecv",level:3},{value:"hours",id:"hours",level:3},{value:"hoursTake",id:"hourstake",level:3},{value:"hoursCount",id:"hourscount",level:3},{value:"hoursCountTo",id:"hourscountto",level:3},{value:"hoursbus",id:"hoursbus",level:3},{value:"hresonance",id:"hresonance",level:3},{value:"hresonanceTake",id:"hresonancetake",level:3},{value:"hresonanceCount",id:"hresonancecount",level:3},{value:"hresonanceCountTo",id:"hresonancecountto",level:3},{value:"hresonancebus",id:"hresonancebus",level:3},{value:"hresonancerecv",id:"hresonancerecv",level:3},{value:"imag",id:"imag",level:3},{value:"imagTake",id:"imagtake",level:3},{value:"imagCount",id:"imagcount",level:3},{value:"imagCountTo",id:"imagcountto",level:3},{value:"imagbus",id:"imagbus",level:3},{value:"imagrecv",id:"imagrecv",level:3},{value:"kcutoff",id:"kcutoff",level:3},{value:"kcutoffTake",id:"kcutofftake",level:3},{value:"kcutoffCount",id:"kcutoffcount",level:3},{value:"kcutoffCountTo",id:"kcutoffcountto",level:3},{value:"kcutoffbus",id:"kcutoffbus",level:3},{value:"kcutoffrecv",id:"kcutoffrecv",level:3},{value:"krush",id:"krush",level:3},{value:"krushTake",id:"krushtake",level:3},{value:"krushCount",id:"krushcount",level:3},{value:"krushCountTo",id:"krushcountto",level:3},{value:"krushbus",id:"krushbus",level:3},{value:"krushrecv",id:"krushrecv",level:3},{value:"lagogo",id:"lagogo",level:3},{value:"lagogoTake",id:"lagogotake",level:3},{value:"lagogoCount",id:"lagogocount",level:3},{value:"lagogoCountTo",id:"lagogocountto",level:3},{value:"lagogobus",id:"lagogobus",level:3},{value:"lagogorecv",id:"lagogorecv",level:3},{value:"lbrick",id:"lbrick",level:3},{value:"lbrickTake",id:"lbricktake",level:3},{value:"lbrickCount",id:"lbrickcount",level:3},{value:"lbrickCountTo",id:"lbrickcountto",level:3},{value:"lbrickbus",id:"lbrickbus",level:3},{value:"lbrickrecv",id:"lbrickrecv",level:3},{value:"lclap",id:"lclap",level:3},{value:"lclapTake",id:"lclaptake",level:3},{value:"lclapCount",id:"lclapcount",level:3},{value:"lclapCountTo",id:"lclapcountto",level:3},{value:"lclapbus",id:"lclapbus",level:3},{value:"lclaprecv",id:"lclaprecv",level:3},{value:"lclaves",id:"lclaves",level:3},{value:"lclavesTake",id:"lclavestake",level:3},{value:"lclavesCount",id:"lclavescount",level:3},{value:"lclavesCountTo",id:"lclavescountto",level:3},{value:"lclavesbus",id:"lclavesbus",level:3},{value:"lclavesrecv",id:"lclavesrecv",level:3},{value:"lclhat",id:"lclhat",level:3},{value:"lclhatTake",id:"lclhattake",level:3},{value:"lclhatCount",id:"lclhatcount",level:3},{value:"lclhatCountTo",id:"lclhatcountto",level:3},{value:"lclhatbus",id:"lclhatbus",level:3},{value:"lclhatrecv",id:"lclhatrecv",level:3},{value:"lcrash",id:"lcrash",level:3},{value:"lcrashTake",id:"lcrashtake",level:3},{value:"lcrashCount",id:"lcrashcount",level:3},{value:"lcrashCountTo",id:"lcrashcountto",level:3},{value:"lcrashbus",id:"lcrashbus",level:3},{value:"lcrashrecv",id:"lcrashrecv",level:3},{value:"legato",id:"legato",level:3},{value:"legatoTake",id:"legatotake",level:3},{value:"legatoCount",id:"legatocount",level:3},{value:"legatoCountTo",id:"legatocountto",level:3},{value:"legatobus",id:"legatobus",level:3},{value:"leslie",id:"leslie",level:3},{value:"leslieTake",id:"leslietake",level:3},{value:"leslieCount",id:"lesliecount",level:3},{value:"leslieCountTo",id:"lesliecountto",level:3},{value:"lesliebus",id:"lesliebus",level:3},{value:"leslierecv",id:"leslierecv",level:3},{value:"lfo",id:"lfo",level:3},{value:"lfoTake",id:"lfotake",level:3},{value:"lfoCount",id:"lfocount",level:3},{value:"lfoCountTo",id:"lfocountto",level:3},{value:"lfobus",id:"lfobus",level:3},{value:"lforecv",id:"lforecv",level:3},{value:"lfocutoffint",id:"lfocutoffint",level:3},{value:"lfocutoffintTake",id:"lfocutoffinttake",level:3},{value:"lfocutoffintCount",id:"lfocutoffintcount",level:3},{value:"lfocutoffintCountTo",id:"lfocutoffintcountto",level:3},{value:"lfocutoffintbus",id:"lfocutoffintbus",level:3},{value:"lfocutoffintrecv",id:"lfocutoffintrecv",level:3},{value:"lfodelay",id:"lfodelay",level:3},{value:"lfodelayTake",id:"lfodelaytake",level:3},{value:"lfodelayCount",id:"lfodelaycount",level:3},{value:"lfodelayCountTo",id:"lfodelaycountto",level:3},{value:"lfodelaybus",id:"lfodelaybus",level:3},{value:"lfodelayrecv",id:"lfodelayrecv",level:3},{value:"lfoint",id:"lfoint",level:3},{value:"lfointTake",id:"lfointtake",level:3},{value:"lfointCount",id:"lfointcount",level:3},{value:"lfointCountTo",id:"lfointcountto",level:3},{value:"lfointbus",id:"lfointbus",level:3},{value:"lfointrecv",id:"lfointrecv",level:3},{value:"lfopitchint",id:"lfopitchint",level:3},{value:"lfopitchintTake",id:"lfopitchinttake",level:3},{value:"lfopitchintCount",id:"lfopitchintcount",level:3},{value:"lfopitchintCountTo",id:"lfopitchintcountto",level:3},{value:"lfopitchintbus",id:"lfopitchintbus",level:3},{value:"lfopitchintrecv",id:"lfopitchintrecv",level:3},{value:"lfoshape",id:"lfoshape",level:3},{value:"lfoshapeTake",id:"lfoshapetake",level:3},{value:"lfoshapeCount",id:"lfoshapecount",level:3},{value:"lfoshapeCountTo",id:"lfoshapecountto",level:3},{value:"lfoshapebus",id:"lfoshapebus",level:3},{value:"lfoshaperecv",id:"lfoshaperecv",level:3},{value:"lfosync",id:"lfosync",level:3},{value:"lfosyncTake",id:"lfosynctake",level:3},{value:"lfosyncCount",id:"lfosynccount",level:3},{value:"lfosyncCountTo",id:"lfosynccountto",level:3},{value:"lfosyncbus",id:"lfosyncbus",level:3},{value:"lfosyncrecv",id:"lfosyncrecv",level:3},{value:"lhitom",id:"lhitom",level:3},{value:"lhitomTake",id:"lhitomtake",level:3},{value:"lhitomCount",id:"lhitomcount",level:3},{value:"lhitomCountTo",id:"lhitomcountto",level:3},{value:"lhitombus",id:"lhitombus",level:3},{value:"lhitomrecv",id:"lhitomrecv",level:3},{value:"lkick",id:"lkick",level:3},{value:"lkickTake",id:"lkicktake",level:3},{value:"lkickCount",id:"lkickcount",level:3},{value:"lkickCountTo",id:"lkickcountto",level:3},{value:"lkickbus",id:"lkickbus",level:3},{value:"lkickrecv",id:"lkickrecv",level:3},{value:"llotom",id:"llotom",level:3},{value:"llotomTake",id:"llotomtake",level:3},{value:"llotomCount",id:"llotomcount",level:3},{value:"llotomCountTo",id:"llotomcountto",level:3},{value:"llotombus",id:"llotombus",level:3},{value:"llotomrecv",id:"llotomrecv",level:3},{value:"lock",id:"lock",level:3},{value:"lockTake",id:"locktake",level:3},{value:"lockCount",id:"lockcount",level:3},{value:"lockCountTo",id:"lockcountto",level:3},{value:"lockbus",id:"lockbus",level:3},{value:"lockrecv",id:"lockrecv",level:3},{value:"loop",id:"loop",level:3},{value:"loopTake",id:"looptake",level:3},{value:"loopCount",id:"loopcount",level:3},{value:"loopCountTo",id:"loopcountto",level:3},{value:"loopbus",id:"loopbus",level:3},{value:"lophat",id:"lophat",level:3},{value:"lophatTake",id:"lophattake",level:3},{value:"lophatCount",id:"lophatcount",level:3},{value:"lophatCountTo",id:"lophatcountto",level:3},{value:"lophatbus",id:"lophatbus",level:3},{value:"lophatrecv",id:"lophatrecv",level:3},{value:"lrate",id:"lrate",level:3},{value:"lrateTake",id:"lratetake",level:3},{value:"lrateCount",id:"lratecount",level:3},{value:"lrateCountTo",id:"lratecountto",level:3},{value:"lratebus",id:"lratebus",level:3},{value:"lraterecv",id:"lraterecv",level:3},{value:"lsize",id:"lsize",level:3},{value:"lsizeTake",id:"lsizetake",level:3},{value:"lsizeCount",id:"lsizecount",level:3},{value:"lsizeCountTo",id:"lsizecountto",level:3},{value:"lsizebus",id:"lsizebus",level:3},{value:"lsizerecv",id:"lsizerecv",level:3},{value:"lsnare",id:"lsnare",level:3},{value:"lsnareTake",id:"lsnaretake",level:3},{value:"lsnareCount",id:"lsnarecount",level:3},{value:"lsnareCountTo",id:"lsnarecountto",level:3},{value:"lsnarebus",id:"lsnarebus",level:3},{value:"lsnarerecv",id:"lsnarerecv",level:3},{value:"midibend",id:"midibend",level:3},{value:"midibendTake",id:"midibendtake",level:3},{value:"midibendCount",id:"midibendcount",level:3},{value:"midibendCountTo",id:"midibendcountto",level:3},{value:"midibendbus",id:"midibendbus",level:3},{value:"midichan",id:"midichan",level:3},{value:"midichanTake",id:"midichantake",level:3},{value:"midichanCount",id:"midichancount",level:3},{value:"midichanCountTo",id:"midichancountto",level:3},{value:"midichanbus",id:"midichanbus",level:3},{value:"midicmd",id:"midicmd",level:3},{value:"midicmdTake",id:"midicmdtake",level:3},{value:"midicmdbus",id:"midicmdbus",level:3},{value:"miditouch",id:"miditouch",level:3},{value:"miditouchTake",id:"miditouchtake",level:3},{value:"miditouchCount",id:"miditouchcount",level:3},{value:"miditouchCountTo",id:"miditouchcountto",level:3},{value:"miditouchbus",id:"miditouchbus",level:3},{value:"minutes",id:"minutes",level:3},{value:"minutesTake",id:"minutestake",level:3},{value:"minutesCount",id:"minutescount",level:3},{value:"minutesCountTo",id:"minutescountto",level:3},{value:"minutesbus",id:"minutesbus",level:3},{value:"modwheel",id:"modwheel",level:3},{value:"modwheelTake",id:"modwheeltake",level:3},{value:"modwheelCount",id:"modwheelcount",level:3},{value:"modwheelCountTo",id:"modwheelcountto",level:3},{value:"modwheelbus",id:"modwheelbus",level:3},{value:"modwheelrecv",id:"modwheelrecv",level:3},{value:"mtranspose",id:"mtranspose",level:3},{value:"mtransposeTake",id:"mtransposetake",level:3},{value:"mtransposeCount",id:"mtransposecount",level:3},{value:"mtransposeCountTo",id:"mtransposecountto",level:3},{value:"mtransposebus",id:"mtransposebus",level:3},{value:"mtransposerecv",id:"mtransposerecv",level:3},{value:"n",id:"n",level:3},{value:"nTake",id:"ntake",level:3},{value:"nCount",id:"ncount",level:3},{value:"nCountTo",id:"ncountto",level:3},{value:"nbus",id:"nbus",level:3},{value:"note",id:"note",level:3},{value:"noteTake",id:"notetake",level:3},{value:"noteCount",id:"notecount",level:3},{value:"noteCountTo",id:"notecountto",level:3},{value:"notebus",id:"notebus",level:3},{value:"nudge",id:"nudge",level:3},{value:"nudgeTake",id:"nudgetake",level:3},{value:"nudgeCount",id:"nudgecount",level:3},{value:"nudgeCountTo",id:"nudgecountto",level:3},{value:"nudgebus",id:"nudgebus",level:3},{value:"nudgerecv",id:"nudgerecv",level:3},{value:"octave",id:"octave",level:3},{value:"octaveTake",id:"octavetake",level:3},{value:"octaveCount",id:"octavecount",level:3},{value:"octaveCountTo",id:"octavecountto",level:3},{value:"octavebus",id:"octavebus",level:3},{value:"octaveR",id:"octaver",level:3},{value:"octaveRTake",id:"octavertake",level:3},{value:"octaveRCount",id:"octavercount",level:3},{value:"octaveRCountTo",id:"octavercountto",level:3},{value:"octaveRbus",id:"octaverbus",level:3},{value:"octaveRrecv",id:"octaverrecv",level:3},{value:"octer",id:"octer",level:3},{value:"octerTake",id:"octertake",level:3},{value:"octerCount",id:"octercount",level:3},{value:"octerCountTo",id:"octercountto",level:3},{value:"octerbus",id:"octerbus",level:3},{value:"octerrecv",id:"octerrecv",level:3},{value:"octersub",id:"octersub",level:3},{value:"octersubTake",id:"octersubtake",level:3},{value:"octersubCount",id:"octersubcount",level:3},{value:"octersubCountTo",id:"octersubcountto",level:3},{value:"octersubbus",id:"octersubbus",level:3},{value:"octersubrecv",id:"octersubrecv",level:3},{value:"octersubsub",id:"octersubsub",level:3},{value:"octersubsubTake",id:"octersubsubtake",level:3},{value:"octersubsubCount",id:"octersubsubcount",level:3},{value:"octersubsubCountTo",id:"octersubsubcountto",level:3},{value:"octersubsubbus",id:"octersubsubbus",level:3},{value:"octersubsubrecv",id:"octersubsubrecv",level:3},{value:"offset",id:"offset",level:3},{value:"offsetTake",id:"offsettake",level:3},{value:"offsetCount",id:"offsetcount",level:3},{value:"offsetCountTo",id:"offsetcountto",level:3},{value:"offsetbus",id:"offsetbus",level:3},{value:"ophatdecay",id:"ophatdecay",level:3},{value:"ophatdecayTake",id:"ophatdecaytake",level:3},{value:"ophatdecayCount",id:"ophatdecaycount",level:3},{value:"ophatdecayCountTo",id:"ophatdecaycountto",level:3},{value:"ophatdecaybus",id:"ophatdecaybus",level:3},{value:"ophatdecayrecv",id:"ophatdecayrecv",level:3},{value:"orbit",id:"orbit",level:3},{value:"orbitTake",id:"orbittake",level:3},{value:"orbitCount",id:"orbitcount",level:3},{value:"orbitCountTo",id:"orbitcountto",level:3},{value:"orbitbus",id:"orbitbus",level:3},{value:"orbitrecv",id:"orbitrecv",level:3},{value:"overgain",id:"overgain",level:3},{value:"overgainTake",id:"overgaintake",level:3},{value:"overgainCount",id:"overgaincount",level:3},{value:"overgainCountTo",id:"overgaincountto",level:3},{value:"overgainbus",id:"overgainbus",level:3},{value:"overshape",id:"overshape",level:3},{value:"overshapeTake",id:"overshapetake",level:3},{value:"overshapeCount",id:"overshapecount",level:3},{value:"overshapeCountTo",id:"overshapecountto",level:3},{value:"overshapebus",id:"overshapebus",level:3},{value:"overshaperecv",id:"overshaperecv",level:3},{value:"pan",id:"pan",level:3},{value:"panTake",id:"pantake",level:3},{value:"panCount",id:"pancount",level:3},{value:"panCountTo",id:"pancountto",level:3},{value:"panbus",id:"panbus",level:3},{value:"panrecv",id:"panrecv",level:3},{value:"panorient",id:"panorient",level:3},{value:"panorientTake",id:"panorienttake",level:3},{value:"panorientCount",id:"panorientcount",level:3},{value:"panorientCountTo",id:"panorientcountto",level:3},{value:"panorientbus",id:"panorientbus",level:3},{value:"panorientrecv",id:"panorientrecv",level:3},{value:"panspan",id:"panspan",level:3},{value:"panspanTake",id:"panspantake",level:3},{value:"panspanCount",id:"panspancount",level:3},{value:"panspanCountTo",id:"panspancountto",level:3},{value:"panspanbus",id:"panspanbus",level:3},{value:"panspanrecv",id:"panspanrecv",level:3},{value:"pansplay",id:"pansplay",level:3},{value:"pansplayTake",id:"pansplaytake",level:3},{value:"pansplayCount",id:"pansplaycount",level:3},{value:"pansplayCountTo",id:"pansplaycountto",level:3},{value:"pansplaybus",id:"pansplaybus",level:3},{value:"pansplayrecv",id:"pansplayrecv",level:3},{value:"panwidth",id:"panwidth",level:3},{value:"panwidthTake",id:"panwidthtake",level:3},{value:"panwidthCount",id:"panwidthcount",level:3},{value:"panwidthCountTo",id:"panwidthcountto",level:3},{value:"panwidthbus",id:"panwidthbus",level:3},{value:"panwidthrecv",id:"panwidthrecv",level:3},{value:"partials",id:"partials",level:3},{value:"partialsTake",id:"partialstake",level:3},{value:"partialsCount",id:"partialscount",level:3},{value:"partialsCountTo",id:"partialscountto",level:3},{value:"partialsbus",id:"partialsbus",level:3},{value:"partialsrecv",id:"partialsrecv",level:3},{value:"phaserdepth",id:"phaserdepth",level:3},{value:"phaserdepthTake",id:"phaserdepthtake",level:3},{value:"phaserdepthCount",id:"phaserdepthcount",level:3},{value:"phaserdepthCountTo",id:"phaserdepthcountto",level:3},{value:"phaserdepthbus",id:"phaserdepthbus",level:3},{value:"phaserdepthrecv",id:"phaserdepthrecv",level:3},{value:"phaserrate",id:"phaserrate",level:3},{value:"phaserrateTake",id:"phaserratetake",level:3},{value:"phaserrateCount",id:"phaserratecount",level:3},{value:"phaserrateCountTo",id:"phaserratecountto",level:3},{value:"phaserratebus",id:"phaserratebus",level:3},{value:"phaserraterecv",id:"phaserraterecv",level:3},{value:"pitch1",id:"pitch1",level:3},{value:"pitch1Take",id:"pitch1take",level:3},{value:"pitch1Count",id:"pitch1count",level:3},{value:"pitch1CountTo",id:"pitch1countto",level:3},{value:"pitch1bus",id:"pitch1bus",level:3},{value:"pitch1recv",id:"pitch1recv",level:3},{value:"pitch2",id:"pitch2",level:3},{value:"pitch2Take",id:"pitch2take",level:3},{value:"pitch2Count",id:"pitch2count",level:3},{value:"pitch2CountTo",id:"pitch2countto",level:3},{value:"pitch2bus",id:"pitch2bus",level:3},{value:"pitch2recv",id:"pitch2recv",level:3},{value:"pitch3",id:"pitch3",level:3},{value:"pitch3Take",id:"pitch3take",level:3},{value:"pitch3Count",id:"pitch3count",level:3},{value:"pitch3CountTo",id:"pitch3countto",level:3},{value:"pitch3bus",id:"pitch3bus",level:3},{value:"pitch3recv",id:"pitch3recv",level:3},{value:"polyTouch",id:"polytouch",level:3},{value:"polyTouchTake",id:"polytouchtake",level:3},{value:"polyTouchCount",id:"polytouchcount",level:3},{value:"polyTouchCountTo",id:"polytouchcountto",level:3},{value:"polyTouchbus",id:"polytouchbus",level:3},{value:"portamento",id:"portamento",level:3},{value:"portamentoTake",id:"portamentotake",level:3},{value:"portamentoCount",id:"portamentocount",level:3},{value:"portamentoCountTo",id:"portamentocountto",level:3},{value:"portamentobus",id:"portamentobus",level:3},{value:"portamentorecv",id:"portamentorecv",level:3},{value:"progNum",id:"prognum",level:3},{value:"progNumTake",id:"prognumtake",level:3},{value:"progNumCount",id:"prognumcount",level:3},{value:"progNumCountTo",id:"prognumcountto",level:3},{value:"progNumbus",id:"prognumbus",level:3},{value:"rate",id:"rate",level:3},{value:"rateTake",id:"ratetake",level:3},{value:"rateCount",id:"ratecount",level:3},{value:"rateCountTo",id:"ratecountto",level:3},{value:"ratebus",id:"ratebus",level:3},{value:"raterecv",id:"raterecv",level:3},{value:"real",id:"real",level:3},{value:"realTake",id:"realtake",level:3},{value:"realCount",id:"realcount",level:3},{value:"realCountTo",id:"realcountto",level:3},{value:"realbus",id:"realbus",level:3},{value:"realrecv",id:"realrecv",level:3},{value:"release",id:"release",level:3},{value:"releaseTake",id:"releasetake",level:3},{value:"releaseCount",id:"releasecount",level:3},{value:"releaseCountTo",id:"releasecountto",level:3},{value:"releasebus",id:"releasebus",level:3},{value:"releaserecv",id:"releaserecv",level:3},{value:"resonance",id:"resonance",level:3},{value:"resonanceTake",id:"resonancetake",level:3},{value:"resonanceCount",id:"resonancecount",level:3},{value:"resonanceCountTo",id:"resonancecountto",level:3},{value:"resonancebus",id:"resonancebus",level:3},{value:"resonancerecv",id:"resonancerecv",level:3},{value:"ring",id:"ring",level:3},{value:"ringTake",id:"ringtake",level:3},{value:"ringCount",id:"ringcount",level:3},{value:"ringCountTo",id:"ringcountto",level:3},{value:"ringbus",id:"ringbus",level:3},{value:"ringrecv",id:"ringrecv",level:3},{value:"ringdf",id:"ringdf",level:3},{value:"ringdfTake",id:"ringdftake",level:3},{value:"ringdfCount",id:"ringdfcount",level:3},{value:"ringdfCountTo",id:"ringdfcountto",level:3},{value:"ringdfbus",id:"ringdfbus",level:3},{value:"ringdfrecv",id:"ringdfrecv",level:3},{value:"ringf",id:"ringf",level:3},{value:"ringfTake",id:"ringftake",level:3},{value:"ringfCount",id:"ringfcount",level:3},{value:"ringfCountTo",id:"ringfcountto",level:3},{value:"ringfbus",id:"ringfbus",level:3},{value:"ringfrecv",id:"ringfrecv",level:3},{value:"room",id:"room",level:3},{value:"roomTake",id:"roomtake",level:3},{value:"roomCount",id:"roomcount",level:3},{value:"roomCountTo",id:"roomcountto",level:3},{value:"roombus",id:"roombus",level:3},{value:"roomrecv",id:"roomrecv",level:3},{value:"sagogo",id:"sagogo",level:3},{value:"sagogoTake",id:"sagogotake",level:3},{value:"sagogoCount",id:"sagogocount",level:3},{value:"sagogoCountTo",id:"sagogocountto",level:3},{value:"sagogobus",id:"sagogobus",level:3},{value:"sagogorecv",id:"sagogorecv",level:3},{value:"sclap",id:"sclap",level:3},{value:"sclapTake",id:"sclaptake",level:3},{value:"sclapCount",id:"sclapcount",level:3},{value:"sclapCountTo",id:"sclapcountto",level:3},{value:"sclapbus",id:"sclapbus",level:3},{value:"sclaprecv",id:"sclaprecv",level:3},{value:"sclaves",id:"sclaves",level:3},{value:"sclavesTake",id:"sclavestake",level:3},{value:"sclavesCount",id:"sclavescount",level:3},{value:"sclavesCountTo",id:"sclavescountto",level:3},{value:"sclavesbus",id:"sclavesbus",level:3},{value:"sclavesrecv",id:"sclavesrecv",level:3},{value:"scram",id:"scram",level:3},{value:"scramTake",id:"scramtake",level:3},{value:"scramCount",id:"scramcount",level:3},{value:"scramCountTo",id:"scramcountto",level:3},{value:"scrambus",id:"scrambus",level:3},{value:"scramrecv",id:"scramrecv",level:3},{value:"scrash",id:"scrash",level:3},{value:"scrashTake",id:"scrashtake",level:3},{value:"scrashCount",id:"scrashcount",level:3},{value:"scrashCountTo",id:"scrashcountto",level:3},{value:"scrashbus",id:"scrashbus",level:3},{value:"scrashrecv",id:"scrashrecv",level:3},{value:"seconds",id:"seconds",level:3},{value:"secondsTake",id:"secondstake",level:3},{value:"secondsCount",id:"secondscount",level:3},{value:"secondsCountTo",id:"secondscountto",level:3},{value:"secondsbus",id:"secondsbus",level:3},{value:"semitone",id:"semitone",level:3},{value:"semitoneTake",id:"semitonetake",level:3},{value:"semitoneCount",id:"semitonecount",level:3},{value:"semitoneCountTo",id:"semitonecountto",level:3},{value:"semitonebus",id:"semitonebus",level:3},{value:"semitonerecv",id:"semitonerecv",level:3},{value:"shape",id:"shape",level:3},{value:"shapeTake",id:"shapetake",level:3},{value:"shapeCount",id:"shapecount",level:3},{value:"shapeCountTo",id:"shapecountto",level:3},{value:"shapebus",id:"shapebus",level:3},{value:"shaperecv",id:"shaperecv",level:3},{value:"size",id:"size",level:3},{value:"sizeTake",id:"sizetake",level:3},{value:"sizeCount",id:"sizecount",level:3},{value:"sizeCountTo",id:"sizecountto",level:3},{value:"sizebus",id:"sizebus",level:3},{value:"sizerecv",id:"sizerecv",level:3},{value:"slide",id:"slide",level:3},{value:"slideTake",id:"slidetake",level:3},{value:"slideCount",id:"slidecount",level:3},{value:"slideCountTo",id:"slidecountto",level:3},{value:"slidebus",id:"slidebus",level:3},{value:"sliderecv",id:"sliderecv",level:3},{value:"slider0",id:"slider0",level:3},{value:"slider0Take",id:"slider0take",level:3},{value:"slider0Count",id:"slider0count",level:3},{value:"slider0CountTo",id:"slider0countto",level:3},{value:"slider0bus",id:"slider0bus",level:3},{value:"slider0recv",id:"slider0recv",level:3},{value:"slider1",id:"slider1",level:3},{value:"slider1Take",id:"slider1take",level:3},{value:"slider1Count",id:"slider1count",level:3},{value:"slider1CountTo",id:"slider1countto",level:3},{value:"slider1bus",id:"slider1bus",level:3},{value:"slider1recv",id:"slider1recv",level:3},{value:"slider10",id:"slider10",level:3},{value:"slider10Take",id:"slider10take",level:3},{value:"slider10Count",id:"slider10count",level:3},{value:"slider10CountTo",id:"slider10countto",level:3},{value:"slider10bus",id:"slider10bus",level:3},{value:"slider10recv",id:"slider10recv",level:3},{value:"slider11",id:"slider11",level:3},{value:"slider11Take",id:"slider11take",level:3},{value:"slider11Count",id:"slider11count",level:3},{value:"slider11CountTo",id:"slider11countto",level:3},{value:"slider11bus",id:"slider11bus",level:3},{value:"slider11recv",id:"slider11recv",level:3},{value:"slider12",id:"slider12",level:3},{value:"slider12Take",id:"slider12take",level:3},{value:"slider12Count",id:"slider12count",level:3},{value:"slider12CountTo",id:"slider12countto",level:3},{value:"slider12bus",id:"slider12bus",level:3},{value:"slider12recv",id:"slider12recv",level:3},{value:"slider13",id:"slider13",level:3},{value:"slider13Take",id:"slider13take",level:3},{value:"slider13Count",id:"slider13count",level:3},{value:"slider13CountTo",id:"slider13countto",level:3},{value:"slider13bus",id:"slider13bus",level:3},{value:"slider13recv",id:"slider13recv",level:3},{value:"slider14",id:"slider14",level:3},{value:"slider14Take",id:"slider14take",level:3},{value:"slider14Count",id:"slider14count",level:3},{value:"slider14CountTo",id:"slider14countto",level:3},{value:"slider14bus",id:"slider14bus",level:3},{value:"slider14recv",id:"slider14recv",level:3},{value:"slider15",id:"slider15",level:3},{value:"slider15Take",id:"slider15take",level:3},{value:"slider15Count",id:"slider15count",level:3},{value:"slider15CountTo",id:"slider15countto",level:3},{value:"slider15bus",id:"slider15bus",level:3},{value:"slider15recv",id:"slider15recv",level:3},{value:"slider2",id:"slider2",level:3},{value:"slider2Take",id:"slider2take",level:3},{value:"slider2Count",id:"slider2count",level:3},{value:"slider2CountTo",id:"slider2countto",level:3},{value:"slider2bus",id:"slider2bus",level:3},{value:"slider2recv",id:"slider2recv",level:3},{value:"slider3",id:"slider3",level:3},{value:"slider3Take",id:"slider3take",level:3},{value:"slider3Count",id:"slider3count",level:3},{value:"slider3CountTo",id:"slider3countto",level:3},{value:"slider3bus",id:"slider3bus",level:3},{value:"slider3recv",id:"slider3recv",level:3},{value:"slider4",id:"slider4",level:3},{value:"slider4Take",id:"slider4take",level:3},{value:"slider4Count",id:"slider4count",level:3},{value:"slider4CountTo",id:"slider4countto",level:3},{value:"slider4bus",id:"slider4bus",level:3},{value:"slider4recv",id:"slider4recv",level:3},{value:"slider5",id:"slider5",level:3},{value:"slider5Take",id:"slider5take",level:3},{value:"slider5Count",id:"slider5count",level:3},{value:"slider5CountTo",id:"slider5countto",level:3},{value:"slider5bus",id:"slider5bus",level:3},{value:"slider5recv",id:"slider5recv",level:3},{value:"slider6",id:"slider6",level:3},{value:"slider6Take",id:"slider6take",level:3},{value:"slider6Count",id:"slider6count",level:3},{value:"slider6CountTo",id:"slider6countto",level:3},{value:"slider6bus",id:"slider6bus",level:3},{value:"slider6recv",id:"slider6recv",level:3},{value:"slider7",id:"slider7",level:3},{value:"slider7Take",id:"slider7take",level:3},{value:"slider7Count",id:"slider7count",level:3},{value:"slider7CountTo",id:"slider7countto",level:3},{value:"slider7bus",id:"slider7bus",level:3},{value:"slider7recv",id:"slider7recv",level:3},{value:"slider8",id:"slider8",level:3},{value:"slider8Take",id:"slider8take",level:3},{value:"slider8Count",id:"slider8count",level:3},{value:"slider8CountTo",id:"slider8countto",level:3},{value:"slider8bus",id:"slider8bus",level:3},{value:"slider8recv",id:"slider8recv",level:3},{value:"slider9",id:"slider9",level:3},{value:"slider9Take",id:"slider9take",level:3},{value:"slider9Count",id:"slider9count",level:3},{value:"slider9CountTo",id:"slider9countto",level:3},{value:"slider9bus",id:"slider9bus",level:3},{value:"slider9recv",id:"slider9recv",level:3},{value:"smear",id:"smear",level:3},{value:"smearTake",id:"smeartake",level:3},{value:"smearCount",id:"smearcount",level:3},{value:"smearCountTo",id:"smearcountto",level:3},{value:"smearbus",id:"smearbus",level:3},{value:"smearrecv",id:"smearrecv",level:3},{value:"songPtr",id:"songptr",level:3},{value:"songPtrTake",id:"songptrtake",level:3},{value:"songPtrCount",id:"songptrcount",level:3},{value:"songPtrCountTo",id:"songptrcountto",level:3},{value:"songPtrbus",id:"songptrbus",level:3},{value:"speed",id:"speed",level:3},{value:"speedTake",id:"speedtake",level:3},{value:"speedCount",id:"speedcount",level:3},{value:"speedCountTo",id:"speedcountto",level:3},{value:"speedbus",id:"speedbus",level:3},{value:"squiz",id:"squiz",level:3},{value:"squizTake",id:"squiztake",level:3},{value:"squizCount",id:"squizcount",level:3},{value:"squizCountTo",id:"squizcountto",level:3},{value:"squizbus",id:"squizbus",level:3},{value:"squizrecv",id:"squizrecv",level:3},{value:"stepsPerOctave",id:"stepsperoctave",level:3},{value:"stepsPerOctaveTake",id:"stepsperoctavetake",level:3},{value:"stepsPerOctaveCount",id:"stepsperoctavecount",level:3},{value:"stepsPerOctaveCountTo",id:"stepsperoctavecountto",level:3},{value:"stepsPerOctavebus",id:"stepsperoctavebus",level:3},{value:"stepsPerOctaverecv",id:"stepsperoctaverecv",level:3},{value:"stutterdepth",id:"stutterdepth",level:3},{value:"stutterdepthTake",id:"stutterdepthtake",level:3},{value:"stutterdepthCount",id:"stutterdepthcount",level:3},{value:"stutterdepthCountTo",id:"stutterdepthcountto",level:3},{value:"stutterdepthbus",id:"stutterdepthbus",level:3},{value:"stutterdepthrecv",id:"stutterdepthrecv",level:3},{value:"stuttertime",id:"stuttertime",level:3},{value:"stuttertimeTake",id:"stuttertimetake",level:3},{value:"stuttertimeCount",id:"stuttertimecount",level:3},{value:"stuttertimeCountTo",id:"stuttertimecountto",level:3},{value:"stuttertimebus",id:"stuttertimebus",level:3},{value:"stuttertimerecv",id:"stuttertimerecv",level:3},{value:"sustain",id:"sustain",level:3},{value:"sustainTake",id:"sustaintake",level:3},{value:"sustainCount",id:"sustaincount",level:3},{value:"sustainCountTo",id:"sustaincountto",level:3},{value:"sustainbus",id:"sustainbus",level:3},{value:"sustainpedal",id:"sustainpedal",level:3},{value:"sustainpedalTake",id:"sustainpedaltake",level:3},{value:"sustainpedalCount",id:"sustainpedalcount",level:3},{value:"sustainpedalCountTo",id:"sustainpedalcountto",level:3},{value:"sustainpedalbus",id:"sustainpedalbus",level:3},{value:"sustainpedalrecv",id:"sustainpedalrecv",level:3},{value:"timescale",id:"timescale",level:3},{value:"timescaleTake",id:"timescaletake",level:3},{value:"timescaleCount",id:"timescalecount",level:3},{value:"timescaleCountTo",id:"timescalecountto",level:3},{value:"timescalebus",id:"timescalebus",level:3},{value:"timescalewin",id:"timescalewin",level:3},{value:"timescalewinTake",id:"timescalewintake",level:3},{value:"timescalewinCount",id:"timescalewincount",level:3},{value:"timescalewinCountTo",id:"timescalewincountto",level:3},{value:"timescalewinbus",id:"timescalewinbus",level:3},{value:"to",id:"to",level:3},{value:"toTake",id:"totake",level:3},{value:"toCount",id:"tocount",level:3},{value:"toCountTo",id:"tocountto",level:3},{value:"tobus",id:"tobus",level:3},{value:"torecv",id:"torecv",level:3},{value:"toArg",id:"toarg",level:3},{value:"toArgTake",id:"toargtake",level:3},{value:"toArgbus",id:"toargbus",level:3},{value:"toArgrecv",id:"toargrecv",level:3},{value:"tomdecay",id:"tomdecay",level:3},{value:"tomdecayTake",id:"tomdecaytake",level:3},{value:"tomdecayCount",id:"tomdecaycount",level:3},{value:"tomdecayCountTo",id:"tomdecaycountto",level:3},{value:"tomdecaybus",id:"tomdecaybus",level:3},{value:"tomdecayrecv",id:"tomdecayrecv",level:3},{value:"tremolodepth",id:"tremolodepth",level:3},{value:"tremolodepthTake",id:"tremolodepthtake",level:3},{value:"tremolodepthCount",id:"tremolodepthcount",level:3},{value:"tremolodepthCountTo",id:"tremolodepthcountto",level:3},{value:"tremolodepthbus",id:"tremolodepthbus",level:3},{value:"tremolodepthrecv",id:"tremolodepthrecv",level:3},{value:"tremolorate",id:"tremolorate",level:3},{value:"tremolorateTake",id:"tremoloratetake",level:3},{value:"tremolorateCount",id:"tremoloratecount",level:3},{value:"tremolorateCountTo",id:"tremoloratecountto",level:3},{value:"tremoloratebus",id:"tremoloratebus",level:3},{value:"tremoloraterecv",id:"tremoloraterecv",level:3},{value:"triode",id:"triode",level:3},{value:"triodeTake",id:"triodetake",level:3},{value:"triodeCount",id:"triodecount",level:3},{value:"triodeCountTo",id:"triodecountto",level:3},{value:"triodebus",id:"triodebus",level:3},{value:"trioderecv",id:"trioderecv",level:3},{value:"tsdelay",id:"tsdelay",level:3},{value:"tsdelayTake",id:"tsdelaytake",level:3},{value:"tsdelayCount",id:"tsdelaycount",level:3},{value:"tsdelayCountTo",id:"tsdelaycountto",level:3},{value:"tsdelaybus",id:"tsdelaybus",level:3},{value:"tsdelayrecv",id:"tsdelayrecv",level:3},{value:"uid",id:"uid",level:3},{value:"uidTake",id:"uidtake",level:3},{value:"uidCount",id:"uidcount",level:3},{value:"uidCountTo",id:"uidcountto",level:3},{value:"uidbus",id:"uidbus",level:3},{value:"unit",id:"unit",level:3},{value:"unitTake",id:"unittake",level:3},{value:"unitbus",id:"unitbus",level:3},{value:"val",id:"val",level:3},{value:"valTake",id:"valtake",level:3},{value:"valCount",id:"valcount",level:3},{value:"valCountTo",id:"valcountto",level:3},{value:"valbus",id:"valbus",level:3},{value:"vcfegint",id:"vcfegint",level:3},{value:"vcfegintTake",id:"vcfeginttake",level:3},{value:"vcfegintCount",id:"vcfegintcount",level:3},{value:"vcfegintCountTo",id:"vcfegintcountto",level:3},{value:"vcfegintbus",id:"vcfegintbus",level:3},{value:"vcfegintrecv",id:"vcfegintrecv",level:3},{value:"vcoegint",id:"vcoegint",level:3},{value:"vcoegintTake",id:"vcoeginttake",level:3},{value:"vcoegintCount",id:"vcoegintcount",level:3},{value:"vcoegintCountTo",id:"vcoegintcountto",level:3},{value:"vcoegintbus",id:"vcoegintbus",level:3},{value:"vcoegintrecv",id:"vcoegintrecv",level:3},{value:"velocity",id:"velocity",level:3},{value:"velocityTake",id:"velocitytake",level:3},{value:"velocityCount",id:"velocitycount",level:3},{value:"velocityCountTo",id:"velocitycountto",level:3},{value:"velocitybus",id:"velocitybus",level:3},{value:"velocityrecv",id:"velocityrecv",level:3},{value:"voice",id:"voice",level:3},{value:"voiceTake",id:"voicetake",level:3},{value:"voiceCount",id:"voicecount",level:3},{value:"voiceCountTo",id:"voicecountto",level:3},{value:"voicebus",id:"voicebus",level:3},{value:"voicerecv",id:"voicerecv",level:3},{value:"vowel",id:"vowel",level:3},{value:"vowelTake",id:"voweltake",level:3},{value:"vowelbus",id:"vowelbus",level:3},{value:"vowelrecv",id:"vowelrecv",level:3},{value:"waveloss",id:"waveloss",level:3},{value:"wavelossTake",id:"wavelosstake",level:3},{value:"wavelossCount",id:"wavelosscount",level:3},{value:"wavelossCountTo",id:"wavelosscountto",level:3},{value:"wavelossbus",id:"wavelossbus",level:3},{value:"wavelossrecv",id:"wavelossrecv",level:3},{value:"xsdelay",id:"xsdelay",level:3},{value:"xsdelayTake",id:"xsdelaytake",level:3},{value:"xsdelayCount",id:"xsdelaycount",level:3},{value:"xsdelayCountTo",id:"xsdelaycountto",level:3},{value:"xsdelaybus",id:"xsdelaybus",level:3},{value:"xsdelayrecv",id:"xsdelayrecv",level:3},{value:"voi",id:"voi",level:3},{value:"voibus",id:"voibus",level:3},{value:"voirecv",id:"voirecv",level:3},{value:"vco",id:"vco",level:3},{value:"vcobus",id:"vcobus",level:3},{value:"vcorecv",id:"vcorecv",level:3},{value:"vcf",id:"vcf",level:3},{value:"vcfbus",id:"vcfbus",level:3},{value:"vcfrecv",id:"vcfrecv",level:3},{value:"up",id:"up",level:3},{value:"tremr",id:"tremr",level:3},{value:"tremrbus",id:"tremrbus",level:3},{value:"tremrrecv",id:"tremrrecv",level:3},{value:"tremdp",id:"tremdp",level:3},{value:"tremdpbus",id:"tremdpbus",level:3},{value:"tremdprecv",id:"tremdprecv",level:3},{value:"tdecay",id:"tdecay",level:3},{value:"tdecaybus",id:"tdecaybus",level:3},{value:"tdecayrecv",id:"tdecayrecv",level:3},{value:"sz",id:"sz",level:3},{value:"szbus",id:"szbus",level:3},{value:"szrecv",id:"szrecv",level:3},{value:"sus",id:"sus",level:3},{value:"stt",id:"stt",level:3},{value:"sttbus",id:"sttbus",level:3},{value:"sttrecv",id:"sttrecv",level:3},{value:"std",id:"std",level:3},{value:"stdbus",id:"stdbus",level:3},{value:"stdrecv",id:"stdrecv",level:3},{value:"sld",id:"sld",level:3},{value:"sldbus",id:"sldbus",level:3},{value:"sldrecv",id:"sldrecv",level:3},{value:"scr",id:"scr",level:3},{value:"scrbus",id:"scrbus",level:3},{value:"scrrecv",id:"scrrecv",level:3},{value:"scp",id:"scp",level:3},{value:"scpbus",id:"scpbus",level:3},{value:"scprecv",id:"scprecv",level:3},{value:"scl",id:"scl",level:3},{value:"sclbus",id:"sclbus",level:3},{value:"sclrecv",id:"sclrecv",level:3},{value:"sag",id:"sag",level:3},{value:"sagbus",id:"sagbus",level:3},{value:"sagrecv",id:"sagrecv",level:3},{value:"s",id:"s",level:3},{value:"rel",id:"rel",level:3},{value:"relbus",id:"relbus",level:3},{value:"relrecv",id:"relrecv",level:3},{value:"por",id:"por",level:3},{value:"porbus",id:"porbus",level:3},{value:"porrecv",id:"porrecv",level:3},{value:"pit3",id:"pit3",level:3},{value:"pit3bus",id:"pit3bus",level:3},{value:"pit3recv",id:"pit3recv",level:3},{value:"pit2",id:"pit2",level:3},{value:"pit2bus",id:"pit2bus",level:3},{value:"pit2recv",id:"pit2recv",level:3},{value:"pit1",id:"pit1",level:3},{value:"pit1bus",id:"pit1bus",level:3},{value:"pit1recv",id:"pit1recv",level:3},{value:"phasr",id:"phasr",level:3},{value:"phasrbus",id:"phasrbus",level:3},{value:"phasrrecv",id:"phasrrecv",level:3},{value:"phasdp",id:"phasdp",level:3},{value:"phasdpbus",id:"phasdpbus",level:3},{value:"phasdprecv",id:"phasdprecv",level:3},{value:"ohdecay",id:"ohdecay",level:3},{value:"ohdecaybus",id:"ohdecaybus",level:3},{value:"ohdecayrecv",id:"ohdecayrecv",level:3},{value:"number",id:"number",level:3},{value:"lsn",id:"lsn",level:3},{value:"lsnbus",id:"lsnbus",level:3},{value:"lsnrecv",id:"lsnrecv",level:3},{value:"lpq",id:"lpq",level:3},{value:"lpqbus",id:"lpqbus",level:3},{value:"lpqrecv",id:"lpqrecv",level:3},{value:"lpf",id:"lpf",level:3},{value:"lpfbus",id:"lpfbus",level:3},{value:"lpfrecv",id:"lpfrecv",level:3},{value:"loh",id:"loh",level:3},{value:"lohbus",id:"lohbus",level:3},{value:"lohrecv",id:"lohrecv",level:3},{value:"llt",id:"llt",level:3},{value:"lltbus",id:"lltbus",level:3},{value:"lltrecv",id:"lltrecv",level:3},{value:"lht",id:"lht",level:3},{value:"lhtbus",id:"lhtbus",level:3},{value:"lhtrecv",id:"lhtrecv",level:3},{value:"lfop",id:"lfop",level:3},{value:"lfopbus",id:"lfopbus",level:3},{value:"lfoprecv",id:"lfoprecv",level:3},{value:"lfoi",id:"lfoi",level:3},{value:"lfoibus",id:"lfoibus",level:3},{value:"lfoirecv",id:"lfoirecv",level:3},{value:"lfoc",id:"lfoc",level:3},{value:"lfocbus",id:"lfocbus",level:3},{value:"lfocrecv",id:"lfocrecv",level:3},{value:"lcr",id:"lcr",level:3},{value:"lcrbus",id:"lcrbus",level:3},{value:"lcrrecv",id:"lcrrecv",level:3},{value:"lcp",id:"lcp",level:3},{value:"lcpbus",id:"lcpbus",level:3},{value:"lcprecv",id:"lcprecv",level:3},{value:"lcl",id:"lcl",level:3},{value:"lclbus",id:"lclbus",level:3},{value:"lclrecv",id:"lclrecv",level:3},{value:"lch",id:"lch",level:3},{value:"lchbus",id:"lchbus",level:3},{value:"lchrecv",id:"lchrecv",level:3},{value:"lbd",id:"lbd",level:3},{value:"lbdbus",id:"lbdbus",level:3},{value:"lbdrecv",id:"lbdrecv",level:3},{value:"lag",id:"lag",level:3},{value:"lagbus",id:"lagbus",level:3},{value:"lagrecv",id:"lagrecv",level:3},{value:"hpq",id:"hpq",level:3},{value:"hpqbus",id:"hpqbus",level:3},{value:"hpqrecv",id:"hpqrecv",level:3},{value:"hpf",id:"hpf",level:3},{value:"hpfbus",id:"hpfbus",level:3},{value:"hpfrecv",id:"hpfrecv",level:3},{value:"hg",id:"hg",level:3},{value:"hgbus",id:"hgbus",level:3},{value:"hgrecv",id:"hgrecv",level:3},{value:"gat",id:"gat",level:3},{value:"gatbus",id:"gatbus",level:3},{value:"gatrecv",id:"gatrecv",level:3},{value:"fadeOutTime",id:"fadeouttime",level:3},{value:"dt",id:"dt",level:3},{value:"dtbus",id:"dtbus",level:3},{value:"dtrecv",id:"dtrecv",level:3},{value:"dfb",id:"dfb",level:3},{value:"dfbbus",id:"dfbbus",level:3},{value:"dfbrecv",id:"dfbrecv",level:3},{value:"det",id:"det",level:3},{value:"detbus",id:"detbus",level:3},{value:"detrecv",id:"detrecv",level:3},{value:"delayt",id:"delayt",level:3},{value:"delaytbus",id:"delaytbus",level:3},{value:"delaytrecv",id:"delaytrecv",level:3},{value:"delayfb",id:"delayfb",level:3},{value:"delayfbbus",id:"delayfbbus",level:3},{value:"delayfbrecv",id:"delayfbrecv",level:3},{value:"ctfg",id:"ctfg",level:3},{value:"ctfgbus",id:"ctfgbus",level:3},{value:"ctfgrecv",id:"ctfgrecv",level:3},{value:"ctf",id:"ctf",level:3},{value:"ctfbus",id:"ctfbus",level:3},{value:"ctfrecv",id:"ctfrecv",level:3},{value:"chdecay",id:"chdecay",level:3},{value:"chdecaybus",id:"chdecaybus",level:3},{value:"chdecayrecv",id:"chdecayrecv",level:3},{value:"bpq",id:"bpq",level:3},{value:"bpqbus",id:"bpqbus",level:3},{value:"bpqrecv",id:"bpqrecv",level:3},{value:"bpf",id:"bpf",level:3},{value:"bpfbus",id:"bpfbus",level:3},{value:"bpfrecv",id:"bpfrecv",level:3},{value:"att",id:"att",level:3},{value:"attbus",id:"attbus",level:3},{value:"attrecv",id:"attrecv",level:3}],p={toc:i};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"grp"},"grp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"grp :: [String -> ValueMap] -> Pattern String -> ControlPattern \n")),(0,l.kt)("p",null,"group multiple params into one"),(0,l.kt)("h3",{id:"mf"},"mF"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mF :: String -> String -> ValueMap \n")),(0,l.kt)("h3",{id:"mi"},"mI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mI :: String -> String -> ValueMap \n")),(0,l.kt)("h3",{id:"ms"},"mS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mS :: String -> String -> ValueMap \n")),(0,l.kt)("h3",{id:"pf"},"pF"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pF :: String -> Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Param makers"),(0,l.kt)("h3",{id:"pi"},"pI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pI :: String -> Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pb"},"pB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pB :: String -> Pattern Bool -> ControlPattern \n")),(0,l.kt)("h3",{id:"pr"},"pR"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pR :: String -> Pattern Rational -> ControlPattern \n")),(0,l.kt)("h3",{id:"pn"},"pN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pN :: String -> Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"ps"},"pS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pS :: String -> Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"px"},"pX"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pX :: String -> Pattern [Word8] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pstatef"},"pStateF"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pStateF \n")),(0,l.kt)("h3",{id:"pstatelist"},"pStateList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pStateList \n")),(0,l.kt)("h3",{id:"pstatelistf"},"pStateListF"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pStateListF :: String -> String -> [Double] -> ControlPattern \n")),(0,l.kt)("p",null,"A wrapper for ",(0,l.kt)("inlineCode",{parentName:"p"},"pStateList")," that accepts a ",(0,l.kt)("inlineCode",{parentName:"p"},"[Double]"),"\nrather than a ",(0,l.kt)("inlineCode",{parentName:"p"},"[Value]"),"."),(0,l.kt)("h3",{id:"pstatelists"},"pStateListS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pStateListS :: String -> String -> [String] -> ControlPattern \n")),(0,l.kt)("p",null,"A wrapper for ",(0,l.kt)("inlineCode",{parentName:"p"},"pStateList")," that accepts a ",(0,l.kt)("inlineCode",{parentName:"p"},"[String]"),"\nrather than a ",(0,l.kt)("inlineCode",{parentName:"p"},"[Value]"),"."),(0,l.kt)("h3",{id:"sound"},"sound"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sound :: Pattern String -> ControlPattern \n")),(0,l.kt)("p",null,"Grouped params"),(0,l.kt)("h3",{id:"stake"},"sTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sTake :: String -> [String] -> ControlPattern \n")),(0,l.kt)("h3",{id:"cc"},"cc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cc :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"nrpn"},"nrpn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nrpn :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"nrpnn"},"nrpnn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nrpnn :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"nrpnv"},"nrpnv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nrpnv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"grain"},"grain'"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"grain' :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"midinote"},"midinote"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midinote :: Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"drum"},"drum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"drum :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"drumn"},"drumN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"drumN :: Num a => String -> a \n")),(0,l.kt)("h3",{id:"accelerate"},"accelerate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"accelerate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers that speed up (or slow down) samples while they play."),(0,l.kt)("h3",{id:"acceleratetake"},"accelerateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"accelerateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"acceleratecount"},"accelerateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"accelerateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"acceleratecountto"},"accelerateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"accelerateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"acceleratebus"},"acceleratebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"acceleratebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"amp"},"amp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"amp :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"like ",(0,l.kt)("inlineCode",{parentName:"p"},"gain"),", but linear."),(0,l.kt)("h3",{id:"amptake"},"ampTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ampTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ampcount"},"ampCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ampCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ampcountto"},"ampCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ampCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ampbus"},"ampbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ampbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"amprecv"},"amprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"amprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"array"},"array"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"array :: Pattern [Word8] -> ControlPattern \n")),(0,l.kt)("h3",{id:"arraytake"},"arrayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"arrayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"arraybus"},"arraybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"arraybus :: Pattern Int -> Pattern [Word8] -> ControlPattern \n")),(0,l.kt)("h3",{id:"attack"},"attack"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attack :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers to specify the attack time (in seconds) of an envelope applied to each sample."),(0,l.kt)("h3",{id:"attacktake"},"attackTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attackTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"attackcount"},"attackCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attackCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"attackcountto"},"attackCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attackCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"attackbus"},"attackbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attackbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"attackrecv"},"attackrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attackrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandf"},"bandf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the center frequency of the band-pass filter."),(0,l.kt)("h3",{id:"bandftake"},"bandfTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandfTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandfcount"},"bandfCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandfCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandfcountto"},"bandfCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandfCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"bandfbus"},"bandfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandfrecv"},"bandfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandq"},"bandq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandq :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of anumbers from 0 to 1. Sets the q-factor of the band-pass filter."),(0,l.kt)("h3",{id:"bandqtake"},"bandqTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandqTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandqcount"},"bandqCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandqCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandqcountto"},"bandqCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandqCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"bandqbus"},"bandqbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandqbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bandqrecv"},"bandqrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bandqrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"begin"},"begin"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"begin :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"0.25")," to cut off the first quarter from each sample."),(0,l.kt)("h3",{id:"begintake"},"beginTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"beginTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"begincount"},"beginCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"beginCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"begincountto"},"beginCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"beginCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"beginbus"},"beginbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"beginbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"binshift"},"binshift"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshift :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral binshift"),(0,l.kt)("h3",{id:"binshifttake"},"binshiftTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshiftTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"binshiftcount"},"binshiftCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshiftCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"binshiftcountto"},"binshiftCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshiftCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"binshiftbus"},"binshiftbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshiftbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"binshiftrecv"},"binshiftrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"binshiftrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button0"},"button0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button0take"},"button0Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button0count"},"button0Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button0countto"},"button0CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button0bus"},"button0bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button0recv"},"button0recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button0recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button1"},"button1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button1take"},"button1Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button1count"},"button1Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button1countto"},"button1CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button1bus"},"button1bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button1recv"},"button1recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button1recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button10"},"button10"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button10take"},"button10Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button10count"},"button10Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button10countto"},"button10CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button10bus"},"button10bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button10recv"},"button10recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button10recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button11"},"button11"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button11take"},"button11Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button11count"},"button11Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button11countto"},"button11CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button11bus"},"button11bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button11recv"},"button11recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button11recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button12"},"button12"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button12take"},"button12Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button12count"},"button12Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button12countto"},"button12CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button12bus"},"button12bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button12recv"},"button12recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button12recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button13"},"button13"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button13take"},"button13Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button13count"},"button13Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button13countto"},"button13CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button13bus"},"button13bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button13recv"},"button13recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button13recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button14"},"button14"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button14take"},"button14Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button14count"},"button14Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button14countto"},"button14CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button14bus"},"button14bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button14recv"},"button14recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button14recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button15"},"button15"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button15take"},"button15Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button15count"},"button15Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button15countto"},"button15CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button15bus"},"button15bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button15recv"},"button15recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button15recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button2"},"button2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button2take"},"button2Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button2count"},"button2Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button2countto"},"button2CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button2bus"},"button2bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button2recv"},"button2recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button2recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button3"},"button3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button3take"},"button3Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button3count"},"button3Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button3countto"},"button3CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button3bus"},"button3bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button3recv"},"button3recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button3recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button4"},"button4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button4take"},"button4Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button4count"},"button4Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button4countto"},"button4CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button4bus"},"button4bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button4recv"},"button4recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button4recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button5"},"button5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button5take"},"button5Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button5count"},"button5Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button5countto"},"button5CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button5bus"},"button5bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button5recv"},"button5recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button5recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button6"},"button6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button6take"},"button6Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button6count"},"button6Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button6countto"},"button6CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button6bus"},"button6bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button6recv"},"button6recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button6recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button7"},"button7"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button7take"},"button7Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button7count"},"button7Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button7countto"},"button7CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button7bus"},"button7bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button7recv"},"button7recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button7recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button8"},"button8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button8take"},"button8Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button8count"},"button8Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button8countto"},"button8CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button8bus"},"button8bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button8recv"},"button8recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button8recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"button9"},"button9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button9take"},"button9Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"button9count"},"button9Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"button9countto"},"button9CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"button9bus"},"button9bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"button9recv"},"button9recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"button9recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccn"},"ccn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccn :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccntake"},"ccnTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccnTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccncount"},"ccnCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccnCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccncountto"},"ccnCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccnCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ccnbus"},"ccnbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccnbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccv"},"ccv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccv :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccvtake"},"ccvTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccvTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccvcount"},"ccvCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccvCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ccvcountto"},"ccvCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccvCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ccvbus"},"ccvbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ccvbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"channel"},"channel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"channel :: Pattern Int -> ControlPattern \n")),(0,l.kt)("p",null,"choose the channel the pattern is sent to in superdirt"),(0,l.kt)("h3",{id:"channeltake"},"channelTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"channelTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"channelcount"},"channelCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"channelCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"channelcountto"},"channelCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"channelCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"channelbus"},"channelbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"channelbus :: Pattern Int -> Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"clhatdecay"},"clhatdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"clhatdecaytake"},"clhatdecayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"clhatdecaycount"},"clhatdecayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"clhatdecaycountto"},"clhatdecayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"clhatdecaybus"},"clhatdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"clhatdecayrecv"},"clhatdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clhatdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"coarse"},"coarse"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarse :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"fake-resampling, a pattern of numbers for lowering the sample rate, i.e. 1 for original 2 for half, 3 for a third and so on."),(0,l.kt)("h3",{id:"coarsetake"},"coarseTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarseTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"coarsecount"},"coarseCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarseCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"coarsecountto"},"coarseCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarseCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"coarsebus"},"coarsebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarsebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"coarserecv"},"coarserecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"coarserecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"comb"},"comb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"comb :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral comb"),(0,l.kt)("h3",{id:"combtake"},"combTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"combTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"combcount"},"combCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"combCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"combcountto"},"combCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"combCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"combbus"},"combbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"combbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"combrecv"},"combrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"combrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"control"},"control"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"control :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"controltake"},"controlTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"controlTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"controlcount"},"controlCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"controlCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"controlcountto"},"controlCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"controlCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"controlbus"},"controlbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"controlbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cps"},"cps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cps :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cpstake"},"cpsTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cpsTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"cpscount"},"cpsCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cpsCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"cpscountto"},"cpsCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cpsCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"cpsbus"},"cpsbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cpsbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cpsrecv"},"cpsrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cpsrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"crush"},"crush"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crush :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"bit crushing, a pattern of numbers from 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction)."),(0,l.kt)("h3",{id:"crushtake"},"crushTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crushTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"crushcount"},"crushCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crushCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"crushcountto"},"crushCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crushCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"crushbus"},"crushbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crushbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"crushrecv"},"crushrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"crushrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctlnum"},"ctlNum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctlNum :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctlnumtake"},"ctlNumTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctlNumTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctlnumcount"},"ctlNumCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctlNumCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctlnumcountto"},"ctlNumCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctlNumCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ctlnumbus"},"ctlNumbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctlNumbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctranspose"},"ctranspose"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctranspose :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctransposetake"},"ctransposeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctransposeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctransposecount"},"ctransposeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctransposeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctransposecountto"},"ctransposeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctransposeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ctransposebus"},"ctransposebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctransposebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctransposerecv"},"ctransposerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctransposerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"cut"},"cut"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cut :: Pattern Int -> ControlPattern \n")),(0,l.kt)("p",null,"In the style of classic drum-machines, ",(0,l.kt)("inlineCode",{parentName:"p"},"cut")," will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open."),(0,l.kt)("h3",{id:"cuttake"},"cutTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutcount"},"cutCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutcountto"},"cutCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"cutbus"},"cutbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutbus :: Pattern Int -> Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutrecv"},"cutrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoff"},"cutoff"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoff :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Applies the cutoff frequency of the low-pass filter."),(0,l.kt)("h3",{id:"cutofftake"},"cutoffTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffcount"},"cutoffCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffcountto"},"cutoffCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"cutoffbus"},"cutoffbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffrecv"},"cutoffrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffegint"},"cutoffegint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffeginttake"},"cutoffegintTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegintTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffegintcount"},"cutoffegintCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegintCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffegintcountto"},"cutoffegintCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegintCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"cutoffegintbus"},"cutoffegintbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegintbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"cutoffegintrecv"},"cutoffegintrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cutoffegintrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"decay"},"decay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"decaytake"},"decayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"decaycount"},"decayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"decaycountto"},"decayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"decaybus"},"decaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"decayrecv"},"decayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"decayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"degree"},"degree"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degree :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"degreetake"},"degreeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degreeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"degreecount"},"degreeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degreeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"degreecountto"},"degreeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degreeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"degreebus"},"degreebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degreebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"degreerecv"},"degreerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"degreerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"delay"},"delay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the level of the delay signal."),(0,l.kt)("h3",{id:"delaytake"},"delayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaycount"},"delayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaycountto"},"delayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"delaybus"},"delaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayrecv"},"delayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfeedback"},"delayfeedback"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedback :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the amount of delay feedback."),(0,l.kt)("h3",{id:"delayfeedbacktake"},"delayfeedbackTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedbackTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfeedbackcount"},"delayfeedbackCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedbackCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfeedbackcountto"},"delayfeedbackCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedbackCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"delayfeedbackbus"},"delayfeedbackbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedbackbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfeedbackrecv"},"delayfeedbackrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfeedbackrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytime"},"delaytime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytime :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the length of the delay."),(0,l.kt)("h3",{id:"delaytimetake"},"delaytimeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytimeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytimecount"},"delaytimeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytimeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytimecountto"},"delaytimeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytimeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"delaytimebus"},"delaytimebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytimebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytimerecv"},"delaytimerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytimerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"detune"},"detune"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detune :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"detunetake"},"detuneTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detuneTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"detunecount"},"detuneCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detuneCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"detunecountto"},"detuneCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detuneCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"detunebus"},"detunebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detunebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"detunerecv"},"detunerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detunerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"distort"},"distort"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distort :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"noisy fuzzy distortion"),(0,l.kt)("h3",{id:"distorttake"},"distortTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distortTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"distortcount"},"distortCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distortCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"distortcountto"},"distortCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distortCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"distortbus"},"distortbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distortbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"distortrecv"},"distortrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"distortrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"djf"},"djf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"DJ filter, below 0.5 is low pass filter, above is high pass filter."),(0,l.kt)("h3",{id:"djftake"},"djfTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djfTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"djfcount"},"djfCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djfCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"djfcountto"},"djfCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djfCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"djfbus"},"djfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"djfrecv"},"djfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"djfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"dry"},"dry"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dry :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"when set to ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," will disable all reverb for this pattern. See ",(0,l.kt)("inlineCode",{parentName:"p"},"room")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," for more information about reverb."),(0,l.kt)("h3",{id:"drytake"},"dryTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dryTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"drycount"},"dryCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dryCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"drycountto"},"dryCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dryCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"drybus"},"drybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"drybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dryrecv"},"dryrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dryrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"dur"},"dur"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dur :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"durtake"},"durTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"durTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"durcount"},"durCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"durCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"durcountto"},"durCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"durCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"durbus"},"durbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"durbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"durrecv"},"durrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"durrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"end"},"end"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"end :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"begin"),", but cuts the end off samples, shortening them; e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"0.75")," to cut off the last quarter of each sample."),(0,l.kt)("h3",{id:"endtake"},"endTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"endTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"endcount"},"endCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"endCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"endcountto"},"endCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"endCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"endbus"},"endbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"endbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"enhance"},"enhance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhance :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral enhance"),(0,l.kt)("h3",{id:"enhancetake"},"enhanceTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhanceTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"enhancecount"},"enhanceCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhanceCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"enhancecountto"},"enhanceCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhanceCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"enhancebus"},"enhancebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhancebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"enhancerecv"},"enhancerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"enhancerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"expression"},"expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expression :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"expressiontake"},"expressionTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expressionTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"expressioncount"},"expressionCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expressionCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"expressioncountto"},"expressionCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expressionCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"expressionbus"},"expressionbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expressionbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"expressionrecv"},"expressionrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"expressionrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadeintime"},"fadeInTime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeInTime :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"As with fadeTime, but controls the fade in time of the grain envelope. Not used if the grain begins at position 0 in the sample."),(0,l.kt)("h3",{id:"fadeintimetake"},"fadeInTimeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeInTimeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadeintimecount"},"fadeInTimeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeInTimeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadeintimecountto"},"fadeInTimeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeInTimeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"fadeintimebus"},"fadeInTimebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeInTimebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadetime"},"fadeTime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeTime :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Used when using beginend or chopstriate and friends, to change the fade out time of the ",(0,l.kt)("inlineCode",{parentName:"p"},"grain")," envelope."),(0,l.kt)("h3",{id:"fadetimetake"},"fadeTimeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeTimeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadetimecount"},"fadeTimeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeTimeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadetimecountto"},"fadeTimeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeTimeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"fadetimebus"},"fadeTimebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeTimebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"framerate"},"frameRate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frameRate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"frameratetake"},"frameRateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frameRateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"frameratecount"},"frameRateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frameRateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"frameratecountto"},"frameRateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frameRateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"frameratebus"},"frameRatebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frameRatebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"frames"},"frames"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frames :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"framestake"},"framesTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"framesTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"framescount"},"framesCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"framesCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"framescountto"},"framesCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"framesCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"framesbus"},"framesbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"framesbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"freeze"},"freeze"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freeze :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral freeze"),(0,l.kt)("h3",{id:"freezetake"},"freezeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freezeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"freezecount"},"freezeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freezeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"freezecountto"},"freezeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freezeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"freezebus"},"freezebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freezebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"freezerecv"},"freezerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freezerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"freq"},"freq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freq :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"freqtake"},"freqTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freqTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"freqcount"},"freqCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freqCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"freqcountto"},"freqCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freqCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"freqbus"},"freqbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freqbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"freqrecv"},"freqrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"freqrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"from"},"from"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"from :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"for internal sound routing"),(0,l.kt)("h3",{id:"fromtake"},"fromTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fromTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fromcount"},"fromCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fromCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fromcountto"},"fromCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fromCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"frombus"},"frombus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"frombus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"fromrecv"},"fromrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fromrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshift"},"fshift"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshift :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"frequency shifter"),(0,l.kt)("h3",{id:"fshifttake"},"fshiftTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftcount"},"fshiftCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftcountto"},"fshiftCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"fshiftbus"},"fshiftbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftrecv"},"fshiftrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftnote"},"fshiftnote"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnote :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"frequency shifter"),(0,l.kt)("h3",{id:"fshiftnotetake"},"fshiftnoteTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnoteTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftnotecount"},"fshiftnoteCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnoteCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftnotecountto"},"fshiftnoteCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnoteCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"fshiftnotebus"},"fshiftnotebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnotebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftnoterecv"},"fshiftnoterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftnoterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftphase"},"fshiftphase"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphase :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"frequency shifter"),(0,l.kt)("h3",{id:"fshiftphasetake"},"fshiftphaseTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphaseTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftphasecount"},"fshiftphaseCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphaseCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftphasecountto"},"fshiftphaseCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphaseCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"fshiftphasebus"},"fshiftphasebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphasebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"fshiftphaserecv"},"fshiftphaserecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fshiftphaserecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"gain"},"gain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gain :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers that specify volume. Values less than 1 make the sound quieter. Values greater than 1 make the sound louder. For the linear equivalent, see ",(0,l.kt)("inlineCode",{parentName:"p"},"amp"),"."),(0,l.kt)("h3",{id:"gaintake"},"gainTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gainTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"gaincount"},"gainCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gainCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"gaincountto"},"gainCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gainCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"gainbus"},"gainbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gainbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"gate"},"gate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"gatetake"},"gateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"gatecount"},"gateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"gatecountto"},"gateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"gatebus"},"gatebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gatebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"gaterecv"},"gaterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gaterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"harmonic"},"harmonic"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonic :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"harmonictake"},"harmonicTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonicTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"harmoniccount"},"harmonicCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonicCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"harmoniccountto"},"harmonicCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonicCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"harmonicbus"},"harmonicbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonicbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"harmonicrecv"},"harmonicrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"harmonicrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hatgrain"},"hatgrain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrain :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hatgraintake"},"hatgrainTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrainTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"hatgraincount"},"hatgrainCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrainCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"hatgraincountto"},"hatgrainCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrainCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"hatgrainbus"},"hatgrainbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrainbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hatgrainrecv"},"hatgrainrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hatgrainrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hbrick"},"hbrick"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrick :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"High pass sort of spectral filter"),(0,l.kt)("h3",{id:"hbricktake"},"hbrickTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrickTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"hbrickcount"},"hbrickCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrickCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"hbrickcountto"},"hbrickCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrickCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"hbrickbus"},"hbrickbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrickbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hbrickrecv"},"hbrickrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hbrickrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hcutoff"},"hcutoff"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoff :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Applies the cutoff frequency of the high-pass filter. Also has alias ",(0,l.kt)("inlineCode",{parentName:"p"},"hpf")),(0,l.kt)("h3",{id:"hcutofftake"},"hcutoffTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoffTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"hcutoffcount"},"hcutoffCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoffCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"hcutoffcountto"},"hcutoffCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoffCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"hcutoffbus"},"hcutoffbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoffbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hcutoffrecv"},"hcutoffrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hcutoffrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hold"},"hold"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hold :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers to specify the hold time (in seconds) of an envelope applied to each sample. Only takes effect if ",(0,l.kt)("inlineCode",{parentName:"p"},"attack")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"release")," are also specified."),(0,l.kt)("h3",{id:"holdtake"},"holdTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"holdTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"holdcount"},"holdCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"holdCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"holdcountto"},"holdCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"holdCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"holdbus"},"holdbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"holdbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"holdrecv"},"holdrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"holdrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hours"},"hours"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hours :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hourstake"},"hoursTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hoursTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"hourscount"},"hoursCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hoursCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"hourscountto"},"hoursCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hoursCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"hoursbus"},"hoursbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hoursbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hresonance"},"hresonance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonance :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Applies the resonance of the high-pass filter. Has alias ",(0,l.kt)("inlineCode",{parentName:"p"},"hpq")),(0,l.kt)("h3",{id:"hresonancetake"},"hresonanceTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonanceTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"hresonancecount"},"hresonanceCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonanceCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"hresonancecountto"},"hresonanceCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonanceCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"hresonancebus"},"hresonancebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonancebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hresonancerecv"},"hresonancerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hresonancerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"imag"},"imag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imag :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"imagtake"},"imagTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imagTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"imagcount"},"imagCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imagCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"imagcountto"},"imagCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imagCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"imagbus"},"imagbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imagbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"imagrecv"},"imagrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"imagrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"kcutoff"},"kcutoff"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoff :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"kcutofftake"},"kcutoffTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoffTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"kcutoffcount"},"kcutoffCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoffCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"kcutoffcountto"},"kcutoffCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoffCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"kcutoffbus"},"kcutoffbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoffbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"kcutoffrecv"},"kcutoffrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kcutoffrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"krush"},"krush"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krush :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"shape/bass enhancer"),(0,l.kt)("h3",{id:"krushtake"},"krushTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krushTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"krushcount"},"krushCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krushCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"krushcountto"},"krushCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krushCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"krushbus"},"krushbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krushbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"krushrecv"},"krushrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"krushrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagogo"},"lagogo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogo :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagogotake"},"lagogoTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogoTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagogocount"},"lagogoCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogoCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagogocountto"},"lagogoCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogoCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lagogobus"},"lagogobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagogorecv"},"lagogorecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagogorecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbrick"},"lbrick"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrick :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Low pass sort of spectral filter"),(0,l.kt)("h3",{id:"lbricktake"},"lbrickTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrickTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbrickcount"},"lbrickCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrickCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbrickcountto"},"lbrickCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrickCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lbrickbus"},"lbrickbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrickbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbrickrecv"},"lbrickrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbrickrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclap"},"lclap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclap :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclaptake"},"lclapTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclapTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclapcount"},"lclapCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclapCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclapcountto"},"lclapCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclapCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lclapbus"},"lclapbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclapbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclaprecv"},"lclaprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclaprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclaves"},"lclaves"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclaves :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclavestake"},"lclavesTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclavesTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclavescount"},"lclavesCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclavesCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclavescountto"},"lclavesCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclavesCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lclavesbus"},"lclavesbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclavesbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclavesrecv"},"lclavesrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclavesrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclhat"},"lclhat"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhat :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclhattake"},"lclhatTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhatTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclhatcount"},"lclhatCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhatCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclhatcountto"},"lclhatCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhatCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lclhatbus"},"lclhatbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhatbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclhatrecv"},"lclhatrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclhatrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrash"},"lcrash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrash :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrashtake"},"lcrashTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrashTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrashcount"},"lcrashCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrashCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrashcountto"},"lcrashCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrashCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lcrashbus"},"lcrashbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrashbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrashrecv"},"lcrashrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrashrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"legato"},"legato"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"legato :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"controls the amount of overlap between two adjacent sounds"),(0,l.kt)("h3",{id:"legatotake"},"legatoTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"legatoTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"legatocount"},"legatoCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"legatoCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"legatocountto"},"legatoCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"legatoCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"legatobus"},"legatobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"legatobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"leslie"},"leslie"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"leslie :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"leslietake"},"leslieTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"leslieTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lesliecount"},"leslieCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"leslieCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lesliecountto"},"leslieCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"leslieCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lesliebus"},"lesliebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lesliebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"leslierecv"},"leslierecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"leslierecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfo"},"lfo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfo :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfotake"},"lfoTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocount"},"lfoCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocountto"},"lfoCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfobus"},"lfobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lforecv"},"lforecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lforecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocutoffint"},"lfocutoffint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocutoffinttake"},"lfocutoffintTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffintTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocutoffintcount"},"lfocutoffintCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffintCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocutoffintcountto"},"lfocutoffintCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffintCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfocutoffintbus"},"lfocutoffintbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffintbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocutoffintrecv"},"lfocutoffintrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocutoffintrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfodelay"},"lfodelay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfodelaytake"},"lfodelayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfodelaycount"},"lfodelayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfodelaycountto"},"lfodelayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfodelaybus"},"lfodelaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfodelayrecv"},"lfodelayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfodelayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoint"},"lfoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfointtake"},"lfointTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfointTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfointcount"},"lfointCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfointCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfointcountto"},"lfointCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfointCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfointbus"},"lfointbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfointbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfointrecv"},"lfointrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfointrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopitchint"},"lfopitchint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopitchinttake"},"lfopitchintTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchintTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopitchintcount"},"lfopitchintCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchintCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopitchintcountto"},"lfopitchintCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchintCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfopitchintbus"},"lfopitchintbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchintbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopitchintrecv"},"lfopitchintrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopitchintrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoshape"},"lfoshape"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshape :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoshapetake"},"lfoshapeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshapeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoshapecount"},"lfoshapeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshapeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoshapecountto"},"lfoshapeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshapeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfoshapebus"},"lfoshapebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshapebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoshaperecv"},"lfoshaperecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoshaperecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfosync"},"lfosync"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosync :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfosynctake"},"lfosyncTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosyncTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfosynccount"},"lfosyncCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosyncCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfosynccountto"},"lfosyncCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosyncCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lfosyncbus"},"lfosyncbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosyncbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfosyncrecv"},"lfosyncrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfosyncrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhitom"},"lhitom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitom :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhitomtake"},"lhitomTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitomTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhitomcount"},"lhitomCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitomCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhitomcountto"},"lhitomCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitomCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lhitombus"},"lhitombus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitombus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhitomrecv"},"lhitomrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhitomrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lkick"},"lkick"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkick :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lkicktake"},"lkickTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkickTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lkickcount"},"lkickCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkickCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lkickcountto"},"lkickCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkickCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lkickbus"},"lkickbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkickbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lkickrecv"},"lkickrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lkickrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"llotom"},"llotom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotom :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"llotomtake"},"llotomTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotomTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"llotomcount"},"llotomCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotomCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"llotomcountto"},"llotomCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotomCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"llotombus"},"llotombus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotombus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"llotomrecv"},"llotomrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llotomrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lock"},"lock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lock :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"A pattern of numbers. Specifies whether delaytime is calculated relative to cps. When set to 1, delaytime is a direct multiple of a cycle."),(0,l.kt)("h3",{id:"locktake"},"lockTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lockTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lockcount"},"lockCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lockCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lockcountto"},"lockCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lockCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lockbus"},"lockbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lockbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lockrecv"},"lockrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lockrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"loop"},"loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loop :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"loops the sample (from ",(0,l.kt)("inlineCode",{parentName:"p"},"begin")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"end"),") the specified number of times."),(0,l.kt)("h3",{id:"looptake"},"loopTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loopTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"loopcount"},"loopCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loopCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"loopcountto"},"loopCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loopCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"loopbus"},"loopbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loopbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lophat"},"lophat"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophat :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lophattake"},"lophatTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophatTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lophatcount"},"lophatCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophatCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lophatcountto"},"lophatCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophatCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lophatbus"},"lophatbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophatbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lophatrecv"},"lophatrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lophatrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lrate"},"lrate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lrate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lratetake"},"lrateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lrateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lratecount"},"lrateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lrateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lratecountto"},"lrateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lrateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lratebus"},"lratebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lratebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lraterecv"},"lraterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lraterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsize"},"lsize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsize :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsizetake"},"lsizeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsizeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsizecount"},"lsizeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsizeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsizecountto"},"lsizeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsizeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lsizebus"},"lsizebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsizebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsizerecv"},"lsizerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsizerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnare"},"lsnare"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnare :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnaretake"},"lsnareTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnareTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnarecount"},"lsnareCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnareCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnarecountto"},"lsnareCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnareCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"lsnarebus"},"lsnarebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnarebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnarerecv"},"lsnarerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnarerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"midibend"},"midibend"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midibend :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"midibendtake"},"midibendTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midibendTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"midibendcount"},"midibendCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midibendCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"midibendcountto"},"midibendCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midibendCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"midibendbus"},"midibendbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midibendbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"midichan"},"midichan"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midichan :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"midichantake"},"midichanTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midichanTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"midichancount"},"midichanCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midichanCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"midichancountto"},"midichanCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midichanCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"midichanbus"},"midichanbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midichanbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"midicmd"},"midicmd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midicmd :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"midicmdtake"},"midicmdTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midicmdTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"midicmdbus"},"midicmdbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"midicmdbus :: Pattern Int -> Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"miditouch"},"miditouch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"miditouch :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"miditouchtake"},"miditouchTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"miditouchTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"miditouchcount"},"miditouchCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"miditouchCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"miditouchcountto"},"miditouchCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"miditouchCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"miditouchbus"},"miditouchbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"miditouchbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"minutes"},"minutes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"minutes :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"minutestake"},"minutesTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"minutesTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"minutescount"},"minutesCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"minutesCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"minutescountto"},"minutesCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"minutesCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"minutesbus"},"minutesbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"minutesbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"modwheel"},"modwheel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheel :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"modwheeltake"},"modwheelTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheelTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"modwheelcount"},"modwheelCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheelCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"modwheelcountto"},"modwheelCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheelCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"modwheelbus"},"modwheelbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheelbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"modwheelrecv"},"modwheelrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"modwheelrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"mtranspose"},"mtranspose"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtranspose :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"mtransposetake"},"mtransposeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtransposeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"mtransposecount"},"mtransposeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtransposeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"mtransposecountto"},"mtransposeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtransposeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"mtransposebus"},"mtransposebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtransposebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"mtransposerecv"},"mtransposerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mtransposerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"n"},"n"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"n :: Pattern Note -> ControlPattern \n")),(0,l.kt)("p",null,"The note or sample number to choose for a synth or sampleset"),(0,l.kt)("h3",{id:"ntake"},"nTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ncount"},"nCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ncountto"},"nCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"nbus"},"nbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nbus :: Pattern Int -> Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"note"},"note"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"note :: Pattern Note -> ControlPattern \n")),(0,l.kt)("p",null,"The note or pitch to play a sound or synth with"),(0,l.kt)("h3",{id:"notetake"},"noteTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"noteTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"notecount"},"noteCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"noteCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"notecountto"},"noteCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"noteCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"notebus"},"notebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"notebus :: Pattern Int -> Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"nudge"},"nudge"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudge :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Nudges events into the future by the specified number of seconds. Negative numbers work up to a point as well (due to internal latency)"),(0,l.kt)("h3",{id:"nudgetake"},"nudgeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudgeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"nudgecount"},"nudgeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudgeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"nudgecountto"},"nudgeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudgeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"nudgebus"},"nudgebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudgebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"nudgerecv"},"nudgerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"nudgerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octave"},"octave"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octave :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavetake"},"octaveTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavecount"},"octaveCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavecountto"},"octaveCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"octavebus"},"octavebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octavebus :: Pattern Int -> Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octaver"},"octaveR"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveR :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavertake"},"octaveRTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveRTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavercount"},"octaveRCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveRCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"octavercountto"},"octaveRCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveRCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"octaverbus"},"octaveRbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveRbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"octaverrecv"},"octaveRrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octaveRrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octer"},"octer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octer :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"octaver effect"),(0,l.kt)("h3",{id:"octertake"},"octerTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octerTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"octercount"},"octerCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octerCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"octercountto"},"octerCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octerCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"octerbus"},"octerbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octerbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"octerrecv"},"octerrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octerrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersub"},"octersub"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersub :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"octaver effect"),(0,l.kt)("h3",{id:"octersubtake"},"octersubTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubcount"},"octersubCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubcountto"},"octersubCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"octersubbus"},"octersubbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubrecv"},"octersubrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubsub"},"octersubsub"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsub :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"octaver effect"),(0,l.kt)("h3",{id:"octersubsubtake"},"octersubsubTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsubTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubsubcount"},"octersubsubCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsubCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubsubcountto"},"octersubsubCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsubCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"octersubsubbus"},"octersubsubbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsubbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"octersubsubrecv"},"octersubsubrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"octersubsubrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"offset"},"offset"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offset :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"offsettake"},"offsetTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offsetTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"offsetcount"},"offsetCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offsetCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"offsetcountto"},"offsetCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offsetCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"offsetbus"},"offsetbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offsetbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ophatdecay"},"ophatdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ophatdecaytake"},"ophatdecayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ophatdecaycount"},"ophatdecayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ophatdecaycountto"},"ophatdecayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ophatdecaybus"},"ophatdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ophatdecayrecv"},"ophatdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ophatdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"orbit"},"orbit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbit :: Pattern Int -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers. An ",(0,l.kt)("inlineCode",{parentName:"p"},"orbit")," is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around."),(0,l.kt)("h3",{id:"orbittake"},"orbitTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbitTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"orbitcount"},"orbitCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbitCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"orbitcountto"},"orbitCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbitCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"orbitbus"},"orbitbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbitbus :: Pattern Int -> Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"orbitrecv"},"orbitrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orbitrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"overgain"},"overgain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overgain :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"overgaintake"},"overgainTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overgainTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"overgaincount"},"overgainCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overgainCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"overgaincountto"},"overgainCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overgainCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"overgainbus"},"overgainbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overgainbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"overshape"},"overshape"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshape :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"overshapetake"},"overshapeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshapeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"overshapecount"},"overshapeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshapeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"overshapecountto"},"overshapeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshapeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"overshapebus"},"overshapebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshapebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"overshaperecv"},"overshaperecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"overshaperecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pan"},"pan"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pan :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)"),(0,l.kt)("h3",{id:"pantake"},"panTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pancount"},"panCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"pancountto"},"panCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"panbus"},"panbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"panrecv"},"panrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"panorient"},"panorient"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorient :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers between -1.0 and 1.0, which controls the relative position of the centre pan in a pair of adjacent speakers (multichannel only)"),(0,l.kt)("h3",{id:"panorienttake"},"panorientTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorientTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"panorientcount"},"panorientCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorientCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"panorientcountto"},"panorientCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorientCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"panorientbus"},"panorientbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorientbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"panorientrecv"},"panorientrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panorientrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"panspan"},"panspan"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspan :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers between -inf and inf, which controls how much multichannel output is fanned out (negative is backwards ordering)"),(0,l.kt)("h3",{id:"panspantake"},"panspanTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspanTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"panspancount"},"panspanCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspanCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"panspancountto"},"panspanCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspanCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"panspanbus"},"panspanbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspanbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"panspanrecv"},"panspanrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panspanrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pansplay"},"pansplay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers between 0.0 and 1.0, which controls the multichannel spread range (multichannel only)"),(0,l.kt)("h3",{id:"pansplaytake"},"pansplayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pansplaycount"},"pansplayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"pansplaycountto"},"pansplayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"pansplaybus"},"pansplaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pansplayrecv"},"pansplayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pansplayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"panwidth"},"panwidth"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidth :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers between 0.0 and inf, which controls how much each channel is distributed over neighbours (multichannel only)"),(0,l.kt)("h3",{id:"panwidthtake"},"panwidthTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidthTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"panwidthcount"},"panwidthCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidthCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"panwidthcountto"},"panwidthCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidthCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"panwidthbus"},"panwidthbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidthbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"panwidthrecv"},"panwidthrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"panwidthrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"partials"},"partials"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partials :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"partialstake"},"partialsTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partialsTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"partialscount"},"partialsCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partialsCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"partialscountto"},"partialsCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partialsCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"partialsbus"},"partialsbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partialsbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"partialsrecv"},"partialsrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"partialsrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserdepth"},"phaserdepth"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepth :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Phaser Audio DSP effect | params are ",(0,l.kt)("inlineCode",{parentName:"p"},"phaserrate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"phaserdepth")),(0,l.kt)("h3",{id:"phaserdepthtake"},"phaserdepthTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepthTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserdepthcount"},"phaserdepthCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepthCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserdepthcountto"},"phaserdepthCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepthCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"phaserdepthbus"},"phaserdepthbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepthbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserdepthrecv"},"phaserdepthrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserdepthrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserrate"},"phaserrate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserrate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Phaser Audio DSP effect | params are ",(0,l.kt)("inlineCode",{parentName:"p"},"phaserrate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"phaserdepth")),(0,l.kt)("h3",{id:"phaserratetake"},"phaserrateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserrateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserratecount"},"phaserrateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserrateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserratecountto"},"phaserrateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserrateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"phaserratebus"},"phaserratebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserratebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phaserraterecv"},"phaserraterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phaserraterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch1"},"pitch1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch1take"},"pitch1Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch1count"},"pitch1Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch1countto"},"pitch1CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"pitch1bus"},"pitch1bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch1recv"},"pitch1recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch1recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch2"},"pitch2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch2take"},"pitch2Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch2count"},"pitch2Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch2countto"},"pitch2CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"pitch2bus"},"pitch2bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch2recv"},"pitch2recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch2recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch3"},"pitch3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch3take"},"pitch3Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch3count"},"pitch3Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch3countto"},"pitch3CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"pitch3bus"},"pitch3bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pitch3recv"},"pitch3recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pitch3recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"polytouch"},"polyTouch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"polyTouch :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"polytouchtake"},"polyTouchTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"polyTouchTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"polytouchcount"},"polyTouchCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"polyTouchCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"polytouchcountto"},"polyTouchCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"polyTouchCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"polytouchbus"},"polyTouchbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"polyTouchbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"portamento"},"portamento"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamento :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"portamentotake"},"portamentoTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamentoTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"portamentocount"},"portamentoCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamentoCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"portamentocountto"},"portamentoCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamentoCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"portamentobus"},"portamentobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamentobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"portamentorecv"},"portamentorecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"portamentorecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"prognum"},"progNum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"progNum :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"prognumtake"},"progNumTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"progNumTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"prognumcount"},"progNumCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"progNumCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"prognumcountto"},"progNumCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"progNumCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"prognumbus"},"progNumbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"progNumbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"rate"},"rate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"rate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"used in SuperDirt softsynths as a control rate or ",(0,l.kt)("inlineCode",{parentName:"p"},"speed")),(0,l.kt)("h3",{id:"ratetake"},"rateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"rateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ratecount"},"rateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"rateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ratecountto"},"rateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"rateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ratebus"},"ratebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ratebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"raterecv"},"raterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"raterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"real"},"real"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"real :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral conform"),(0,l.kt)("h3",{id:"realtake"},"realTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"realTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"realcount"},"realCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"realCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"realcountto"},"realCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"realCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"realbus"},"realbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"realbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"realrecv"},"realrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"realrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"release"},"release"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"release :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers to specify the release time (in seconds) of an envelope applied to each sample."),(0,l.kt)("h3",{id:"releasetake"},"releaseTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"releaseTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"releasecount"},"releaseCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"releaseCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"releasecountto"},"releaseCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"releaseCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"releasebus"},"releasebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"releasebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"releaserecv"},"releaserecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"releaserecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"resonance"},"resonance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonance :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Specifies the resonance of the low-pass filter."),(0,l.kt)("h3",{id:"resonancetake"},"resonanceTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonanceTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"resonancecount"},"resonanceCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonanceCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"resonancecountto"},"resonanceCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonanceCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"resonancebus"},"resonancebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonancebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"resonancerecv"},"resonancerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"resonancerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ring"},"ring"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ring :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"ring modulation"),(0,l.kt)("h3",{id:"ringtake"},"ringTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringcount"},"ringCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringcountto"},"ringCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ringbus"},"ringbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringrecv"},"ringrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringdf"},"ringdf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"ring modulation"),(0,l.kt)("h3",{id:"ringdftake"},"ringdfTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdfTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringdfcount"},"ringdfCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdfCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringdfcountto"},"ringdfCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdfCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ringdfbus"},"ringdfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringdfrecv"},"ringdfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringdfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringf"},"ringf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"ring modulation"),(0,l.kt)("h3",{id:"ringftake"},"ringfTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringfTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringfcount"},"ringfCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringfCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringfcountto"},"ringfCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringfCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"ringfbus"},"ringfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ringfrecv"},"ringfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ringfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"room"},"room"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"room :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the level of reverb."),(0,l.kt)("h3",{id:"roomtake"},"roomTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"roomTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"roomcount"},"roomCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"roomCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"roomcountto"},"roomCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"roomCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"roombus"},"roombus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"roombus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"roomrecv"},"roomrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"roomrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagogo"},"sagogo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogo :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagogotake"},"sagogoTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogoTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagogocount"},"sagogoCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogoCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagogocountto"},"sagogoCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogoCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sagogobus"},"sagogobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagogorecv"},"sagogorecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagogorecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclap"},"sclap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclap :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclaptake"},"sclapTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclapTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclapcount"},"sclapCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclapCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclapcountto"},"sclapCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclapCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sclapbus"},"sclapbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclapbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclaprecv"},"sclaprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclaprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclaves"},"sclaves"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclaves :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclavestake"},"sclavesTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclavesTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclavescount"},"sclavesCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclavesCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclavescountto"},"sclavesCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclavesCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sclavesbus"},"sclavesbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclavesbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclavesrecv"},"sclavesrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclavesrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"scram"},"scram"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scram :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral scramble"),(0,l.kt)("h3",{id:"scramtake"},"scramTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scramTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"scramcount"},"scramCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scramCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"scramcountto"},"scramCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scramCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"scrambus"},"scrambus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrambus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scramrecv"},"scramrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scramrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrash"},"scrash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrash :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrashtake"},"scrashTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrashTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrashcount"},"scrashCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrashCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrashcountto"},"scrashCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrashCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"scrashbus"},"scrashbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrashbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrashrecv"},"scrashrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrashrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"seconds"},"seconds"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"seconds :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"secondstake"},"secondsTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"secondsTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"secondscount"},"secondsCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"secondsCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"secondscountto"},"secondsCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"secondsCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"secondsbus"},"secondsbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"secondsbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"semitone"},"semitone"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitone :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"semitonetake"},"semitoneTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitoneTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"semitonecount"},"semitoneCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitoneCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"semitonecountto"},"semitoneCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitoneCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"semitonebus"},"semitonebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitonebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"semitonerecv"},"semitonerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"semitonerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"shape"},"shape"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shape :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"wave shaping distortion, a pattern of numbers from 0 for no distortion up to 1 for loads of distortion."),(0,l.kt)("h3",{id:"shapetake"},"shapeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shapeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"shapecount"},"shapeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shapeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"shapecountto"},"shapeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shapeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"shapebus"},"shapebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shapebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"shaperecv"},"shaperecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"shaperecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"size"},"size"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"size :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers from 0 to 1. Sets the perceptual size (reverb time) of the ",(0,l.kt)("inlineCode",{parentName:"p"},"room")," to be used in reverb."),(0,l.kt)("h3",{id:"sizetake"},"sizeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sizeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sizecount"},"sizeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sizeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sizecountto"},"sizeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sizeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sizebus"},"sizebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sizebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sizerecv"},"sizerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sizerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slide"},"slide"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slide :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slidetake"},"slideTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slideTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slidecount"},"slideCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slideCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slidecountto"},"slideCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slideCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slidebus"},"slidebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slidebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sliderecv"},"sliderecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sliderecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider0"},"slider0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider0take"},"slider0Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider0count"},"slider0Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider0countto"},"slider0CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider0bus"},"slider0bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider0recv"},"slider0recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider0recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider1"},"slider1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider1take"},"slider1Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider1count"},"slider1Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider1countto"},"slider1CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider1bus"},"slider1bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider1recv"},"slider1recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider1recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider10"},"slider10"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider10take"},"slider10Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider10count"},"slider10Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider10countto"},"slider10CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider10bus"},"slider10bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider10recv"},"slider10recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider10recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider11"},"slider11"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider11take"},"slider11Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider11count"},"slider11Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider11countto"},"slider11CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider11bus"},"slider11bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider11recv"},"slider11recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider11recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider12"},"slider12"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider12take"},"slider12Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider12count"},"slider12Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider12countto"},"slider12CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider12bus"},"slider12bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider12recv"},"slider12recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider12recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider13"},"slider13"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider13take"},"slider13Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider13count"},"slider13Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider13countto"},"slider13CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider13bus"},"slider13bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider13recv"},"slider13recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider13recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider14"},"slider14"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider14take"},"slider14Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider14count"},"slider14Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider14countto"},"slider14CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider14bus"},"slider14bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider14recv"},"slider14recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider14recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider15"},"slider15"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider15take"},"slider15Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider15count"},"slider15Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider15countto"},"slider15CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider15bus"},"slider15bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider15recv"},"slider15recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider15recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider2"},"slider2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider2take"},"slider2Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider2count"},"slider2Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider2countto"},"slider2CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider2bus"},"slider2bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider2recv"},"slider2recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider2recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider3"},"slider3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider3take"},"slider3Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider3count"},"slider3Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider3countto"},"slider3CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider3bus"},"slider3bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider3recv"},"slider3recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider3recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider4"},"slider4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider4take"},"slider4Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider4count"},"slider4Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider4countto"},"slider4CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider4bus"},"slider4bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider4recv"},"slider4recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider4recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider5"},"slider5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider5take"},"slider5Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider5count"},"slider5Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider5countto"},"slider5CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider5bus"},"slider5bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider5recv"},"slider5recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider5recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider6"},"slider6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider6take"},"slider6Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider6count"},"slider6Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider6countto"},"slider6CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider6bus"},"slider6bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider6recv"},"slider6recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider6recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider7"},"slider7"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider7take"},"slider7Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider7count"},"slider7Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider7countto"},"slider7CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider7bus"},"slider7bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider7recv"},"slider7recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider7recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider8"},"slider8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider8take"},"slider8Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider8count"},"slider8Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider8countto"},"slider8CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider8bus"},"slider8bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider8recv"},"slider8recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider8recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider9"},"slider9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider9take"},"slider9Take"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9Take :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider9count"},"slider9Count"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9Count :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider9countto"},"slider9CountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9CountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"slider9bus"},"slider9bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"slider9recv"},"slider9recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"slider9recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"smear"},"smear"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smear :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Spectral smear"),(0,l.kt)("h3",{id:"smeartake"},"smearTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smearTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"smearcount"},"smearCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smearCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"smearcountto"},"smearCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smearCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"smearbus"},"smearbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smearbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"smearrecv"},"smearrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"smearrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"songptr"},"songPtr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"songPtr :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"songptrtake"},"songPtrTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"songPtrTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"songptrcount"},"songPtrCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"songPtrCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"songptrcountto"},"songPtrCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"songPtrCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"songptrbus"},"songPtrbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"songPtrbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"speed"},"speed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"speed :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"a pattern of numbers which changes the speed of sample playback, i.e. a cheap way of changing pitch. Negative values will play the sample backwards!"),(0,l.kt)("h3",{id:"speedtake"},"speedTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"speedTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"speedcount"},"speedCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"speedCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"speedcountto"},"speedCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"speedCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"speedbus"},"speedbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"speedbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"squiz"},"squiz"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squiz :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"squiztake"},"squizTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squizTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"squizcount"},"squizCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squizCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"squizcountto"},"squizCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squizCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"squizbus"},"squizbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squizbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"squizrecv"},"squizrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"squizrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"stepsperoctave"},"stepsPerOctave"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctave :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stepsperoctavetake"},"stepsPerOctaveTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctaveTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"stepsperoctavecount"},"stepsPerOctaveCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctaveCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"stepsperoctavecountto"},"stepsPerOctaveCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctaveCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"stepsperoctavebus"},"stepsPerOctavebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctavebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stepsperoctaverecv"},"stepsPerOctaverecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stepsPerOctaverecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"stutterdepth"},"stutterdepth"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepth :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stutterdepthtake"},"stutterdepthTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepthTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"stutterdepthcount"},"stutterdepthCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepthCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"stutterdepthcountto"},"stutterdepthCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepthCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"stutterdepthbus"},"stutterdepthbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepthbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stutterdepthrecv"},"stutterdepthrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stutterdepthrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"stuttertime"},"stuttertime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertime :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stuttertimetake"},"stuttertimeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertimeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"stuttertimecount"},"stuttertimeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertimeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"stuttertimecountto"},"stuttertimeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertimeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"stuttertimebus"},"stuttertimebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertimebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stuttertimerecv"},"stuttertimerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stuttertimerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustain"},"sustain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustain :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustaintake"},"sustainTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustaincount"},"sustainCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustaincountto"},"sustainCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sustainbus"},"sustainbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustainpedal"},"sustainpedal"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedal :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustainpedaltake"},"sustainpedalTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedalTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustainpedalcount"},"sustainpedalCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedalCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustainpedalcountto"},"sustainpedalCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedalCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"sustainpedalbus"},"sustainpedalbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedalbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sustainpedalrecv"},"sustainpedalrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sustainpedalrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescale"},"timescale"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescale :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"time stretch amount"),(0,l.kt)("h3",{id:"timescaletake"},"timescaleTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescaleTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescalecount"},"timescaleCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescaleCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescalecountto"},"timescaleCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescaleCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"timescalebus"},"timescalebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescalewin"},"timescalewin"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalewin :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"time stretch window size"),(0,l.kt)("h3",{id:"timescalewintake"},"timescalewinTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalewinTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescalewincount"},"timescalewinCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalewinCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"timescalewincountto"},"timescalewinCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalewinCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"timescalewinbus"},"timescalewinbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"timescalewinbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"to"},"to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"to :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"for internal sound routing"),(0,l.kt)("h3",{id:"totake"},"toTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"tocount"},"toCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"tocountto"},"toCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"tobus"},"tobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"torecv"},"torecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"torecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"toarg"},"toArg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toArg :: Pattern String -> ControlPattern \n")),(0,l.kt)("p",null,"for internal sound routing"),(0,l.kt)("h3",{id:"toargtake"},"toArgTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toArgTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"toargbus"},"toArgbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toArgbus :: Pattern Int -> Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"toargrecv"},"toArgrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"toArgrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tomdecay"},"tomdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tomdecaytake"},"tomdecayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"tomdecaycount"},"tomdecayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"tomdecaycountto"},"tomdecayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"tomdecaybus"},"tomdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tomdecayrecv"},"tomdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tomdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremolodepth"},"tremolodepth"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepth :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Tremolo Audio DSP effect | params are ",(0,l.kt)("inlineCode",{parentName:"p"},"tremolorate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tremolodepth")),(0,l.kt)("h3",{id:"tremolodepthtake"},"tremolodepthTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepthTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremolodepthcount"},"tremolodepthCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepthCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremolodepthcountto"},"tremolodepthCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepthCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"tremolodepthbus"},"tremolodepthbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepthbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremolodepthrecv"},"tremolodepthrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolodepthrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremolorate"},"tremolorate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolorate :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"Tremolo Audio DSP effect | params are ",(0,l.kt)("inlineCode",{parentName:"p"},"tremolorate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tremolodepth")),(0,l.kt)("h3",{id:"tremoloratetake"},"tremolorateTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolorateTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremoloratecount"},"tremolorateCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolorateCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremoloratecountto"},"tremolorateCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremolorateCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"tremoloratebus"},"tremoloratebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremoloratebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremoloraterecv"},"tremoloraterecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremoloraterecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"triode"},"triode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"triode :: Pattern Double -> ControlPattern \n")),(0,l.kt)("p",null,"tube distortion"),(0,l.kt)("h3",{id:"triodetake"},"triodeTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"triodeTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"triodecount"},"triodeCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"triodeCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"triodecountto"},"triodeCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"triodeCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"triodebus"},"triodebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"triodebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"trioderecv"},"trioderecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"trioderecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tsdelay"},"tsdelay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tsdelaytake"},"tsdelayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"tsdelaycount"},"tsdelayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"tsdelaycountto"},"tsdelayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"tsdelaybus"},"tsdelaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tsdelayrecv"},"tsdelayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tsdelayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"uid"},"uid"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"uid :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"uidtake"},"uidTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"uidTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"uidcount"},"uidCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"uidCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"uidcountto"},"uidCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"uidCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"uidbus"},"uidbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"uidbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"unit"},"unit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"unit :: Pattern String -> ControlPattern \n")),(0,l.kt)("p",null,"used in conjunction with ",(0,l.kt)("inlineCode",{parentName:"p"},"speed"),', accepts values of "r" (rate, default behavior), "c" (cycles), or "s" (seconds). Using ',(0,l.kt)("inlineCode",{parentName:"p"},'unit "c"')," means ",(0,l.kt)("inlineCode",{parentName:"p"},"speed")," will be interpreted in units of cycles, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},'speed "1"')," means samples will be stretched to fill a cycle. Using ",(0,l.kt)("inlineCode",{parentName:"p"},'unit "s"')," means the playback speed will be adjusted so that the duration is the number of seconds specified by ",(0,l.kt)("inlineCode",{parentName:"p"},"speed"),"."),(0,l.kt)("h3",{id:"unittake"},"unitTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"unitTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"unitbus"},"unitbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"unitbus :: Pattern Int -> Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"val"},"val"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"val :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"valtake"},"valTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"valTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"valcount"},"valCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"valCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"valcountto"},"valCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"valCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"valbus"},"valbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"valbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfegint"},"vcfegint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfeginttake"},"vcfegintTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegintTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfegintcount"},"vcfegintCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegintCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfegintcountto"},"vcfegintCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegintCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"vcfegintbus"},"vcfegintbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegintbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfegintrecv"},"vcfegintrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfegintrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcoegint"},"vcoegint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegint :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcoeginttake"},"vcoegintTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegintTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcoegintcount"},"vcoegintCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegintCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcoegintcountto"},"vcoegintCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegintCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"vcoegintbus"},"vcoegintbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegintbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcoegintrecv"},"vcoegintrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcoegintrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"velocity"},"velocity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocity :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"velocitytake"},"velocityTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocityTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"velocitycount"},"velocityCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocityCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"velocitycountto"},"velocityCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocityCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"velocitybus"},"velocitybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocitybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"velocityrecv"},"velocityrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"velocityrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"voice"},"voice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voice :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"voicetake"},"voiceTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voiceTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"voicecount"},"voiceCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voiceCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"voicecountto"},"voiceCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voiceCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"voicebus"},"voicebus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voicebus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"voicerecv"},"voicerecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voicerecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"vowel"},"vowel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vowel :: Pattern String -> ControlPattern \n")),(0,l.kt)("p",null,"formant filter to make things sound like vowels, a pattern of either ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"e"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"i"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"o")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"u"),". Use a rest (",(0,l.kt)("inlineCode",{parentName:"p"},"~"),") for no effect."),(0,l.kt)("h3",{id:"voweltake"},"vowelTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vowelTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"vowelbus"},"vowelbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vowelbus :: Pattern Int -> Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"vowelrecv"},"vowelrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vowelrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"waveloss"},"waveloss"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"waveloss :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"wavelosstake"},"wavelossTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"wavelossTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"wavelosscount"},"wavelossCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"wavelossCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"wavelosscountto"},"wavelossCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"wavelossCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"wavelossbus"},"wavelossbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"wavelossbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"wavelossrecv"},"wavelossrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"wavelossrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"xsdelay"},"xsdelay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"xsdelaytake"},"xsdelayTake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelayTake :: String -> [Double] -> ControlPattern \n")),(0,l.kt)("h3",{id:"xsdelaycount"},"xsdelayCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelayCount :: String -> ControlPattern \n")),(0,l.kt)("h3",{id:"xsdelaycountto"},"xsdelayCountTo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelayCountTo :: String -> Pattern Double -> Pattern ValueMap \n")),(0,l.kt)("h3",{id:"xsdelaybus"},"xsdelaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"xsdelayrecv"},"xsdelayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"xsdelayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"voi"},"voi"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voi :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"voibus"},"voibus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voibus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"voirecv"},"voirecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"voirecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"vco"},"vco"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vco :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcobus"},"vcobus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcobus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcorecv"},"vcorecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcorecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcf"},"vcf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfbus"},"vcfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"vcfrecv"},"vcfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"up"},"up"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"up :: Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremr"},"tremr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremr :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremrbus"},"tremrbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremrbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremrrecv"},"tremrrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremrrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremdp"},"tremdp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremdp :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremdpbus"},"tremdpbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremdpbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tremdprecv"},"tremdprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tremdprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"tdecay"},"tdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tdecaybus"},"tdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"tdecayrecv"},"tdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"tdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sz"},"sz"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sz :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"szbus"},"szbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"szbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"szrecv"},"szrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"szrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sus"},"sus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sus :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stt"},"stt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stt :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sttbus"},"sttbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sttbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sttrecv"},"sttrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sttrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"std"},"std"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"std :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stdbus"},"stdbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stdbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"stdrecv"},"stdrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"stdrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sld"},"sld"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sld :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sldbus"},"sldbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sldbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sldrecv"},"sldrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sldrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"scr"},"scr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scr :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrbus"},"scrbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scrrecv"},"scrrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scrrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"scp"},"scp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scp :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scpbus"},"scpbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scpbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"scprecv"},"scprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"scl"},"scl"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"scl :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclbus"},"sclbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sclrecv"},"sclrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sclrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"sag"},"sag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sag :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagbus"},"sagbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"sagrecv"},"sagrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sagrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"s"},"s"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"s :: Pattern String -> ControlPattern \n")),(0,l.kt)("h3",{id:"rel"},"rel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"rel :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"relbus"},"relbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"relbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"relrecv"},"relrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"relrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"por"},"por"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"por :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"porbus"},"porbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"porbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"porrecv"},"porrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"porrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit3"},"pit3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit3 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit3bus"},"pit3bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit3bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit3recv"},"pit3recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit3recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit2"},"pit2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit2 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit2bus"},"pit2bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit2bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit2recv"},"pit2recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit2recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit1"},"pit1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit1 :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit1bus"},"pit1bus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit1bus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"pit1recv"},"pit1recv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pit1recv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasr"},"phasr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasr :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasrbus"},"phasrbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasrbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasrrecv"},"phasrrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasrrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasdp"},"phasdp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasdp :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasdpbus"},"phasdpbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasdpbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"phasdprecv"},"phasdprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"phasdprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ohdecay"},"ohdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ohdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ohdecaybus"},"ohdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ohdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ohdecayrecv"},"ohdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ohdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"number"},"number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"number :: Pattern Note -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsn"},"lsn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsn :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnbus"},"lsnbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lsnrecv"},"lsnrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lsnrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpq"},"lpq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpq :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpqbus"},"lpqbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpqbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpqrecv"},"lpqrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpqrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpf"},"lpf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpfbus"},"lpfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lpfrecv"},"lpfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lpfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"loh"},"loh"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"loh :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lohbus"},"lohbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lohbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lohrecv"},"lohrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lohrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"llt"},"llt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"llt :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lltbus"},"lltbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lltbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lltrecv"},"lltrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lltrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lht"},"lht"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lht :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhtbus"},"lhtbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhtbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lhtrecv"},"lhtrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lhtrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfop"},"lfop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfop :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfopbus"},"lfopbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfopbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoprecv"},"lfoprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoi"},"lfoi"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoi :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoibus"},"lfoibus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoibus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoirecv"},"lfoirecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoirecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfoc"},"lfoc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfoc :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocbus"},"lfocbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lfocrecv"},"lfocrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lfocrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcr"},"lcr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcr :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrbus"},"lcrbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcrrecv"},"lcrrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcrrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcp"},"lcp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcp :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcpbus"},"lcpbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcpbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcprecv"},"lcprecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcprecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lcl"},"lcl"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lcl :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclbus"},"lclbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lclrecv"},"lclrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lclrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lch"},"lch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lch :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lchbus"},"lchbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lchbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lchrecv"},"lchrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lchrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbd"},"lbd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbd :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbdbus"},"lbdbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbdbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lbdrecv"},"lbdrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lbdrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"lag"},"lag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lag :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagbus"},"lagbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"lagrecv"},"lagrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"lagrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpq"},"hpq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpq :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpqbus"},"hpqbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpqbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpqrecv"},"hpqrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpqrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpf"},"hpf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpfbus"},"hpfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hpfrecv"},"hpfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hpfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"hg"},"hg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hg :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hgbus"},"hgbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hgbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"hgrecv"},"hgrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"hgrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"gat"},"gat"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gat :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"gatbus"},"gatbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gatbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"gatrecv"},"gatrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"gatrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"fadeouttime"},"fadeOutTime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fadeOutTime :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dt"},"dt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dt :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dtbus"},"dtbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dtbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dtrecv"},"dtrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dtrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"dfb"},"dfb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dfb :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dfbbus"},"dfbbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dfbbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"dfbrecv"},"dfbrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dfbrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"det"},"det"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"det :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"detbus"},"detbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"detrecv"},"detrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"detrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayt"},"delayt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayt :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytbus"},"delaytbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delaytrecv"},"delaytrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delaytrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfb"},"delayfb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfb :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfbbus"},"delayfbbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfbbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"delayfbrecv"},"delayfbrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"delayfbrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctfg"},"ctfg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctfg :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctfgbus"},"ctfgbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctfgbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctfgrecv"},"ctfgrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctfgrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctf"},"ctf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctfbus"},"ctfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"ctfrecv"},"ctfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ctfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"chdecay"},"chdecay"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"chdecay :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"chdecaybus"},"chdecaybus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"chdecaybus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"chdecayrecv"},"chdecayrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"chdecayrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpq"},"bpq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpq :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpqbus"},"bpqbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpqbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpqrecv"},"bpqrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpqrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpf"},"bpf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpf :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpfbus"},"bpfbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpfbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"bpfrecv"},"bpfrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bpfrecv :: Pattern Int -> ControlPattern \n")),(0,l.kt)("h3",{id:"att"},"att"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"att :: Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"attbus"},"attbus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attbus :: Pattern Int -> Pattern Double -> ControlPattern \n")),(0,l.kt)("h3",{id:"attrecv"},"attrecv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attrecv :: Pattern Int -> ControlPattern \n")))}c.isMDXComponent=!0}}]);