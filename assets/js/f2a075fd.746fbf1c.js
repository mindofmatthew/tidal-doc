"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6234],{3905:(e,a,r)=>{r.d(a,{Zo:()=>m,kt:()=>c});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function d(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var o=n.createContext({}),p=function(e){var a=n.useContext(o),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},m=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,l=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),u=p(r),h=t,c=u["".concat(o,".").concat(h)]||u[h]||s[h]||l;return r?n.createElement(c,i(i({ref:a},m),{},{components:r})):n.createElement(c,i({ref:a},m))}));function c(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=r.length,i=new Array(l);i[0]=h;var d={};for(var o in a)hasOwnProperty.call(a,o)&&(d[o]=a[o]);d.originalType=e,d[u]="string"==typeof e?e:t,i[1]=d;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8823:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var n=r(3117),t=(r(7294),r(3905));const l={title:"Sound.Tidal.Chords",slug:"/library/modules/Sound.Tidal.Chords"},i=void 0,d={unversionedId:"library/autogenerated/Sound-Tidal-Chords/Sound-Tidal-Chords",id:"library/autogenerated/Sound-Tidal-Chords/Sound-Tidal-Chords",title:"Sound.Tidal.Chords",description:"\x3c!------------------------------------------------------------------------------",source:"@site/docs/library/autogenerated/Sound-Tidal-Chords/Sound-Tidal-Chords.mdx",sourceDirName:"library/autogenerated/Sound-Tidal-Chords",slug:"/library/modules/Sound.Tidal.Chords",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.Chords",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/library/autogenerated/Sound-Tidal-Chords/Sound-Tidal-Chords.mdx",tags:[],version:"current",lastUpdatedBy:"Matthew Kaney",lastUpdatedAt:1673207986,formattedLastUpdatedAt:"Jan 8, 2023",frontMatter:{title:"Sound.Tidal.Chords",slug:"/library/modules/Sound.Tidal.Chords"},sidebar:"library",previous:{title:"Sound.Tidal.Bjorklund",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.Bjorklund"},next:{title:"Sound.Tidal.Config",permalink:"/tidal-doc/docs/library/modules/Sound.Tidal.Config"}},o={},p=[{value:"major",id:"major",level:3},{value:"aug",id:"aug",level:3},{value:"six",id:"six",level:3},{value:"sixNine",id:"sixnine",level:3},{value:"major7",id:"major7",level:3},{value:"major9",id:"major9",level:3},{value:"add9",id:"add9",level:3},{value:"major11",id:"major11",level:3},{value:"add11",id:"add11",level:3},{value:"major13",id:"major13",level:3},{value:"add13",id:"add13",level:3},{value:"dom7",id:"dom7",level:3},{value:"dom9",id:"dom9",level:3},{value:"dom11",id:"dom11",level:3},{value:"dom13",id:"dom13",level:3},{value:"sevenFlat5",id:"sevenflat5",level:3},{value:"sevenSharp5",id:"sevensharp5",level:3},{value:"sevenFlat9",id:"sevenflat9",level:3},{value:"nine",id:"nine",level:3},{value:"eleven",id:"eleven",level:3},{value:"thirteen",id:"thirteen",level:3},{value:"minor",id:"minor",level:3},{value:"diminished",id:"diminished",level:3},{value:"minorSharp5",id:"minorsharp5",level:3},{value:"minor6",id:"minor6",level:3},{value:"minorSixNine",id:"minorsixnine",level:3},{value:"minor7flat5",id:"minor7flat5",level:3},{value:"minor7",id:"minor7",level:3},{value:"minor7sharp5",id:"minor7sharp5",level:3},{value:"minor7flat9",id:"minor7flat9",level:3},{value:"minor7sharp9",id:"minor7sharp9",level:3},{value:"diminished7",id:"diminished7",level:3},{value:"minor9",id:"minor9",level:3},{value:"minor11",id:"minor11",level:3},{value:"minor13",id:"minor13",level:3},{value:"one",id:"one",level:3},{value:"five",id:"five",level:3},{value:"sus2",id:"sus2",level:3},{value:"sus4",id:"sus4",level:3},{value:"sevenSus2",id:"sevensus2",level:3},{value:"sevenSus4",id:"sevensus4",level:3},{value:"nineSus4",id:"ninesus4",level:3},{value:"sevenFlat10",id:"sevenflat10",level:3},{value:"nineSharp5",id:"ninesharp5",level:3},{value:"minor9sharp5",id:"minor9sharp5",level:3},{value:"sevenSharp5flat9",id:"sevensharp5flat9",level:3},{value:"minor7sharp5flat9",id:"minor7sharp5flat9",level:3},{value:"elevenSharp",id:"elevensharp",level:3},{value:"minor11sharp",id:"minor11sharp",level:3},{value:"chordTable",id:"chordtable",level:3},{value:"chordL",id:"chordl",level:3},{value:"chordList",id:"chordlist",level:3},{value:"data",id:"data",level:3},{value:"applyModifier",id:"applymodifier",level:3},{value:"applyModifierPat",id:"applymodifierpat",level:3},{value:"applyModifierPatSeq",id:"applymodifierpatseq",level:3},{value:"chordToPatSeq",id:"chordtopatseq",level:3},{value:"chord",id:"chord",level:3}],m={toc:p};function u(e){let{components:a,...r}=e;return(0,t.kt)("wrapper",(0,n.Z)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h3",{id:"major"},"major"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"major :: Num a => [a] \n")),(0,t.kt)("h3",{id:"aug"},"aug"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"aug :: Num a => [a] \n")),(0,t.kt)("h3",{id:"six"},"six"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"six :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sixnine"},"sixNine"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sixNine :: Num a => [a] \n")),(0,t.kt)("h3",{id:"major7"},"major7"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"major7 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"major9"},"major9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"major9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"add9"},"add9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"add9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"major11"},"major11"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"major11 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"add11"},"add11"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"add11 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"major13"},"major13"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"major13 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"add13"},"add13"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"add13 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"dom7"},"dom7"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"dom7 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"dom9"},"dom9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"dom9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"dom11"},"dom11"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"dom11 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"dom13"},"dom13"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"dom13 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevenflat5"},"sevenFlat5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenFlat5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevensharp5"},"sevenSharp5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenSharp5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevenflat9"},"sevenFlat9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenFlat9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"nine"},"nine"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"nine :: Num a => [a] \n")),(0,t.kt)("h3",{id:"eleven"},"eleven"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"eleven :: Num a => [a] \n")),(0,t.kt)("h3",{id:"thirteen"},"thirteen"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"thirteen :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor"},"minor"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor :: Num a => [a] \n")),(0,t.kt)("h3",{id:"diminished"},"diminished"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"diminished :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minorsharp5"},"minorSharp5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minorSharp5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor6"},"minor6"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor6 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minorsixnine"},"minorSixNine"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minorSixNine :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7flat5"},"minor7flat5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7flat5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7"},"minor7"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7sharp5"},"minor7sharp5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7sharp5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7flat9"},"minor7flat9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7flat9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7sharp9"},"minor7sharp9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7sharp9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"diminished7"},"diminished7"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"diminished7 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor9"},"minor9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor11"},"minor11"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor11 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor13"},"minor13"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor13 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"one"},"one"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"one :: Num a => [a] \n")),(0,t.kt)("h3",{id:"five"},"five"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"five :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sus2"},"sus2"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sus2 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sus4"},"sus4"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sus4 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevensus2"},"sevenSus2"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenSus2 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevensus4"},"sevenSus4"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenSus4 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"ninesus4"},"nineSus4"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"nineSus4 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevenflat10"},"sevenFlat10"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenFlat10 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"ninesharp5"},"nineSharp5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"nineSharp5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor9sharp5"},"minor9sharp5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor9sharp5 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"sevensharp5flat9"},"sevenSharp5flat9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"sevenSharp5flat9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor7sharp5flat9"},"minor7sharp5flat9"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor7sharp5flat9 :: Num a => [a] \n")),(0,t.kt)("h3",{id:"elevensharp"},"elevenSharp"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"elevenSharp :: Num a => [a] \n")),(0,t.kt)("h3",{id:"minor11sharp"},"minor11sharp"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"minor11sharp :: Num a => [a] \n")),(0,t.kt)("h3",{id:"chordtable"},"chordTable"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"chordTable :: Num a => [(String, [a])] \n")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"chordate cs m n")," selects the ",(0,t.kt)("inlineCode",{parentName:"p"},"n"),'th "chord" (a chord is a list of Ints)\nfrom a list of chords ',(0,t.kt)("inlineCode",{parentName:"p"},"cs")," and transposes it by ",(0,t.kt)("inlineCode",{parentName:"p"},"m"),"\nchordate :: Num b => [","[b]","] -> b -> Int -> ","[b]","\nchordate cs m n = map (+m) $ cs!!n"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"enchord chords pn pc")," turns every note in the note pattern ",(0,t.kt)("inlineCode",{parentName:"p"},"pn")," into\na chord, selecting from the chord lists ",(0,t.kt)("inlineCode",{parentName:"p"},"chords")," using the index pattern\n",(0,t.kt)("inlineCode",{parentName:"p"},"pc"),".  For example, ",(0,t.kt)("inlineCode",{parentName:"p"},'Chords.enchord [Chords.major Chords.minor] "c g" "0 1"'),"\nwill create a pattern of a C-major chord followed by a G-minor chord.\nenchord :: Num a => [","[a]","] -> Pattern a -> Pattern Int -> Pattern a\nenchord chords pn pc = flatpat $ (chordate chords) $ pn * pc"),(0,t.kt)("h3",{id:"chordl"},"chordL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"chordL :: Num a => Pattern String -> Pattern [a] \n")),(0,t.kt)("h3",{id:"chordlist"},"chordList"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"chordList :: String \n")),(0,t.kt)("h3",{id:"data"},"data"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"data Modifier \n")),(0,t.kt)("h3",{id:"applymodifier"},"applyModifier"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"applyModifier :: (Enum a, Num a) => Modifier -> [a] -> [a] \n")),(0,t.kt)("h3",{id:"applymodifierpat"},"applyModifierPat"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"applyModifierPat :: (Num a, Enum a) => Pattern [a] -> Pattern [Modifier] -> Pattern [a] \n")),(0,t.kt)("h3",{id:"applymodifierpatseq"},"applyModifierPatSeq"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"applyModifierPatSeq :: (Num a, Enum a) => (a -> b) -> Pattern [a] -> [Pattern [Modifier]] -> Pattern [b] \n")),(0,t.kt)("h3",{id:"chordtopatseq"},"chordToPatSeq"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"chordToPatSeq :: (Num a, Enum a) => (a -> b) -> Pattern a -> Pattern String -> [Pattern [Modifier]] -> Pattern b \n")),(0,t.kt)("h3",{id:"chord"},"chord"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"chord :: (Num a, Enum a) => Pattern a -> Pattern String -> [Pattern [Modifier]] -> Pattern a \n")),(0,t.kt)("p",null,"turns a given pattern of some Num type, a pattern of chord names and a list of patterns of modifiers into a chord pattern"))}u.isMDXComponent=!0}}]);